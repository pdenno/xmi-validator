<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmlns:xmi="http://www.omg.org/spec/XMI/20110701" xmlns:uml="http://www.omg.org/spec/UML/20110701" xmlns:mofext="http://www.omg.org/spec/MOF/20110701">
  <uml:Package URI="http://www.omg.org/spec/CVL/20130301" xmi:type="uml:Package" xmi:id="_fXOBjkSPEeKq37LhoJhhUw" name="CVLMetamodelMaster">
    <packageImport xmi:type="uml:PackageImport" xmi:id="_fXOBj0SPEeKq37LhoJhhUw">
      <importedPackage xmi:type="uml:Package" href="http://www.omg.org/spec/UML/20110701/UML.xmi#_0"/>
    </packageImport>
    <packageImport xmi:type="uml:PackageImport" xmi:id="_pt-i">
      <importedPackage xmi:type="uml:packages" href="http://www.omg.org/spec/UML/20110701/PrimitiveTypes.xmi#_0"/>
    </packageImport>
    <packagedElement xmi:type="uml:Package" xmi:id="_w5ucEJFcEeK-TsyQVDVbrQ" name="Main">
      <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucEZFcEeK-TsyQVDVbrQ">
        <body>&lt;p>derivingValue constraint must be such that for any values &lt;/p></body>
      </ownedComment>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="_w5ucEpFcEeK-TsyQVDVbrQ" name="PrimitiveTypeEnum">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucE5FcEeK-TsyQVDVbrQ" annotatedElement="_w5ucEpFcEeK-TsyQVDVbrQ">
          <body>&lt;p>An enumeration of the most primitive types: String, Boolean, Integer, Real and UnlimitedNatural.&lt;/p></body>
        </ownedComment>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_w5ucFJFcEeK-TsyQVDVbrQ" name="String" classifier="_w5ucEpFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucFZFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucFJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Primitive type String literal.&lt;/p></body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_w5ucFpFcEeK-TsyQVDVbrQ" name="Boolean" classifier="_w5ucEpFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucF5FcEeK-TsyQVDVbrQ" annotatedElement="_w5ucFpFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Primitive type Boolean literal.&lt;/p></body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_w5ucGJFcEeK-TsyQVDVbrQ" name="Integer" classifier="_w5ucEpFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucGZFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucGJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Primitive type Integer literal.&lt;/p></body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_w5ucGpFcEeK-TsyQVDVbrQ" name="Real" classifier="_w5ucEpFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucG5FcEeK-TsyQVDVbrQ" annotatedElement="_w5ucGpFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Primitive type Real literal.&lt;/p></body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_w5ucHJFcEeK-TsyQVDVbrQ" name="UnlimitedNatural" classifier="_w5ucEpFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucHZFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucHJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Primitive type UnlimitedNatural literal.&lt;/p></body>
          </ownedComment>
        </ownedLiteral>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5ucHpFcEeK-TsyQVDVbrQ" name="Choice">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucH5FcEeK-TsyQVDVbrQ" annotatedElement="_w5ucHpFcEeK-TsyQVDVbrQ">
          <body>&lt;p class=&quot;MsoNormal&quot;>&lt;span style=&quot;font-size:8pt;font-family:Tahoma;&quot;>A choice is VSpec whose resolution requires a yes/no decision (True/False). When a variation point is bound to a choice, the decision resolving that choice determines whether or not the variation point will be applied during materialization.&lt;/span>&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>Invariant : If a choice is implied by parent, it must have a parent.&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- Choice&lt;/p>&lt;p>-- If a choice is implied by parent, it must have a parent.&lt;/p>&lt;p>context Choice :&lt;/p>&lt;p>inv isImpliedByParentsImpliesAParent :&lt;/p>&lt;p>self.isImpliedByParent implies VSpec.allInstances()->exists(vSpec | vSpec.childVSpec->includes(self))&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5ucIJFcEeK-TsyQVDVbrQ" general="_w5ucLpFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5ucIZFcEeK-TsyQVDVbrQ" name="defaultResolution" visibility="private">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucIpFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucIZFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The default resolution of this choice.&lt;/p></body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://schema.omg.org/spec/UML/2.2/uml.xml#Boolean"/>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5ucI5FcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5ucJJFcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5ucJZFcEeK-TsyQVDVbrQ" name="isImpliedByParent" visibility="private">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucJpFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucJZFcEeK-TsyQVDVbrQ">
            <body>&lt;p>When True then resolving the parent VSpec positively implies deciding this choice  positively. A VSpec resolution is positive if it is a choice decided positively, or any classifier instantiation, or any value assignment to a variable.&lt;br>&lt;br>For a root choice, True implies it must be resolved positively.&lt;/p></body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://schema.omg.org/spec/UML/2.2/uml.xml#Boolean"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5ucJ5FcEeK-TsyQVDVbrQ" name="VClassifier">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucKJFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucJ5FcEeK-TsyQVDVbrQ">
          <body>&lt;p>A VClassifier (variability classifier) is a VSpec whose resolution requires instantiating it zero or more times and then resolving its sub-tree for each instance. When a repeatable variation point is bound to a VClassifier it will be applied once for each instance of the VClassifier during materialization.&lt;/p>&lt;p>Each variability classifier has an instance multiplicity which specifies lower and upper limits for the number of instances created from it.&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5ucKZFcEeK-TsyQVDVbrQ" general="_w5ucLpFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5ucKpFcEeK-TsyQVDVbrQ" name="instanceMultiplicity" visibility="private" type="_w5uciZFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5ucj5FcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucK5FcEeK-TsyQVDVbrQ" annotatedElement="_w5ucKpFcEeK-TsyQVDVbrQ">
            <body>Specifies a cardinality constraint on the number of instances created from this VClassifier.</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5ucLJFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5ucLZFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5ucLpFcEeK-TsyQVDVbrQ" name="VSpec" isAbstract="true">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucL5FcEeK-TsyQVDVbrQ" annotatedElement="_w5ucLpFcEeK-TsyQVDVbrQ">
          <body>&lt;p class=&quot;MsoNormal&quot;>&lt;span style=&quot;font-size:8pt;font-family:Tahoma;&quot;>A VSpecs is a specification of abstract variability. VSpecs can be organized in trees structures representing implicit logical constraints on their resolutions. VSpecs can have variation points bound to them. To materialize a base model with a variability model over it, resolutions for the VSpecs must be provided.&lt;br>VSpecs are organized as trees, representing logical constraints and guiding the materialization process. &lt;/span>&lt;/p>&lt;p>A VSpec may optionally a group multiplicity specifying upper and lower multiplicities against its children. The meaning of this is that each positive resolution against a VSpec must have a number of positive child resolutions conforming to the multiplicity interval. A VSpec resolution is positive if it is a choice decided positively, or any classifier instantiation, or any value assignment to a variable.&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>Invariant : If the VSpec has a multiplicity interval, it must have a number of children included between the lowerMultiplicity and the upperMultiplicity&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- VSpec&lt;/p>&lt;p>-- nbChild_with_MultiplicityInterval :&lt;/p>&lt;p>--If the VSpec has a multiplicity interval, it must have a number of children included between the lowerMultiplicity and the upperMultiplicity&lt;/p>&lt;p>context VSpec :&lt;/p>&lt;p>inv nbChild_with_MultiplicityInterval :&lt;/p>&lt;p>if not self.groupMultiplicity->isEmpty()&lt;/p>&lt;p>then (self.childVSpec->size() >= self.groupMultiplicity.lower and self.groupMultiplicity.lower&lt;/p>&lt;p>-1&lt;/p>&lt;p>and self.childVSpec->size() = self.groupMultiplicity.upper and self.groupMultiplicity.upper&lt;/p>&lt;p>-1)&lt;/p>&lt;p>-- Infinite upper&lt;/p>&lt;p>or (self.groupMultiplicity.lower&lt;/p>&lt;p>-1 and self.groupMultiplicity.upper == (-1) and self.childVSpec->size() >= self.groupMultiplicity.lower )&lt;/p>&lt;p>-- Infinite lower : no sense for practical purposes&lt;/p>&lt;p>else true&lt;/p>&lt;p>endif&lt;/p>&lt;p>&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p></body>
        </ownedComment>
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucMJFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucLpFcEeK-TsyQVDVbrQ">
          <body>&lt;p>self.derivation.derivedVspec = self&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5ucMZFcEeK-TsyQVDVbrQ" general="_w5vDL5FcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5ucMpFcEeK-TsyQVDVbrQ" name="groupMultiplicity" visibility="private" type="_w5uciZFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5uclJFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucM5FcEeK-TsyQVDVbrQ" annotatedElement="_w5ucMpFcEeK-TsyQVDVbrQ">
            <body>&lt;p>&#xD;
    The group multiplicity of the VSpec. If the VSpec is resolved positively and has a group multiplicity then the number&#xD;
    of&lt;br />&#xD;
    its children resolved positively must conform to the specified multiplicity interval.&#xD;
&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5ucNJFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5ucNZFcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5ucNpFcEeK-TsyQVDVbrQ" name="resolutionTime" visibility="private">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucN5FcEeK-TsyQVDVbrQ" annotatedElement="_w5ucNpFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The latest life-cycle stage at which this VSpec is expected to be resolved, e.g. &quot;Design&quot;, &quot;Link&quot;, &quot;Build&quot;, &quot;PostBuild&quot;, etc. It has no semantics within CVL.&lt;/p></body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://schema.omg.org/spec/UML/2.2/uml.xml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5ucOJFcEeK-TsyQVDVbrQ" name="ownedVSpecDerivation" visibility="private" type="_w5vECZFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vqcpFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucOZFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucOJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The owned VSpecDerivations.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5ucOpFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5ucO5FcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5ucPJFcEeK-TsyQVDVbrQ" name="child" visibility="private" type="_w5ucLpFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vrP5FcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucPZFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucPJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Child VSpecs of this VSpec.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5ucPpFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5ucP5FcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5ucQJFcEeK-TsyQVDVbrQ" name="VSpecResolution" isAbstract="true">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucQZFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucQJFcEeK-TsyQVDVbrQ">
          <body>&lt;p>A VSpecResolution resolves a single VSpec. VSpecResolutions are organized as trees, mirroring the tree structure of the VSpecs they resolve.&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>Invariant : We must retrieve at least all of the resolvedVSpec's children associated with the VSpecResolution's vspec children&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- VSpecResolution&lt;/p>&lt;p>-- We must retrieve at least all of the resolvedVSpec's children associated with the VSpecResolution's vspec children&lt;/p>&lt;p>-- So, the number of VSpecResolution's children must be >= to the number of resolvedVSpec' s children&lt;/p>&lt;p>context VSpecResolution&lt;/p>&lt;p>inv VSpecResChildrenCorrespondsToVSpecChildren :&lt;/p>&lt;p>self.childResolution->size() >= self.resolvedVSpec.childVSpec->size()&lt;/p>&lt;p>and&lt;/p>&lt;p>not (self.resolvedVSpec.childVSpec->exists (vSpec | not (self.childResolution->exists(vRes | vRes.resolvedVSpec == (VSpec)))))&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5ucQpFcEeK-TsyQVDVbrQ" general="_w5vDL5FcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5ucQ5FcEeK-TsyQVDVbrQ" name="resolvedVSpec" visibility="private" type="_w5ucLpFcEeK-TsyQVDVbrQ" association="_w5uc4pFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucRJFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucQ5FcEeK-TsyQVDVbrQ">
            <body>The&amp;nbsp;VSpec&amp;nbsp;this&amp;nbsp;VSpecResolution&amp;nbsp;resolves.Due to&amp;nbsp;VSpec inheritance and VClassifiers, a given VPSec&#xD;
may have several VSpecResolutions resolving it, where each resolution is in the context of its parent.</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5ucRZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5ucRpFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5ucR5FcEeK-TsyQVDVbrQ" name="child" visibility="private" type="_w5ucQJFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vC0pFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucSJFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucR5FcEeK-TsyQVDVbrQ">
            <body>The child resolutions of this VSpecResolution. A given VSpecResolution is interpreted in the context of its parent.</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5ucSZFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5ucSpFcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5ucS5FcEeK-TsyQVDVbrQ" name="ChoiceResolutuion">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucTJFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucS5FcEeK-TsyQVDVbrQ">
          <body>&lt;p>A ChoiceResolution is a VSpecResolution which resolves a single choice by deciding it positively (True) or negatively (False).&lt;/p>&lt;p>&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>Invariant&lt;/p>&lt;p>Invariant : If a choice is selected, the number of selected children must correspond to the multiplicity interval of the resolvedChoice&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- ChoiceResolution&lt;/p>&lt;p>-- If a choice is selected, the number of selected children must correspond to the multiplicity interval of the resolvedChoice&lt;/p>&lt;p>context ChoiceResolutuion :&lt;/p>&lt;p>inv selectedChildrenMustCorrespondsToMultiplicityInterval :&lt;/p>&lt;p>if self.resolvedChoice.groupMultiplicity-&amp;gt;isEmpty()&lt;/p>&lt;p>then&lt;/p>&lt;p>(self.resolvedChoice.groupMultiplicity.upper &amp;lt;&amp;gt; (-1)&lt;/p>&lt;p>and self.resolvedChoice.groupMultiplicity.lower &amp;lt;= self.childResolution-&amp;gt;select (choiceRes | choiceRes.oclAsType(ChoiceResolutuion).decision)-&amp;gt;size()&lt;/p>&lt;p>and self.childResolution-&amp;gt;select (choiceRes | choiceRes.oclAsType(ChoiceResolutuion).decision)-&amp;gt;size() &amp;gt;= self.resolvedChoice.groupMultiplicity.upper&lt;/p>&lt;p>)&lt;/p>&lt;p>or&lt;/p>&lt;p>(self.resolvedChoice.groupMultiplicity.upper == (-1)&lt;/p>&lt;p>and self.resolvedChoice.groupMultiplicity.lower &amp;lt;= self.childResolution-&amp;gt;select (choiceRes | choiceRes.oclAsType(ChoiceResolutuion).decision)-&amp;gt;size()&lt;/p>&lt;p>)&lt;/p>&lt;p>else&lt;/p>&lt;p>-- no choice must be selected&lt;/p>&lt;p>self.childResolution-&amp;gt;select (choiceRes | choiceRes.oclAsType(ChoiceResolutuion).decision)-&amp;gt;isEmpty()&lt;/p>&lt;p>endif&lt;/p>&lt;p>Dynamic semantics&lt;/p>&lt;p>Pre and post condition&lt;/p>&lt;p>Pre-condition :&lt;/p>&lt;p>None&lt;/p>&lt;p>Post-condition:&lt;/p>&lt;p>After a Choice Resolution has been executed, the resolvedChoice is constained in the selected VSpecs set if the boolean decision is set to true, otherwise, the resolvedChoice is contained in the unselected VSpec set.&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- ChoiceResolution&lt;/p>&lt;p>context ChoiceResolutuion::eval(ctx : CVLExecutionContext):&lt;/p>&lt;p>pre :&lt;/p>&lt;p>post :&lt;/p>&lt;p>self.decision implies&lt;/p>&lt;p>ctx.selectedVSpecs-&amp;gt;includes(self.resolvedChoice)&lt;/p>&lt;p>and not self.decision implies&lt;/p>&lt;p>ctx.unselectedVSpecs-&amp;gt;includes(self.resolvedChoice)&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5ucTZFcEeK-TsyQVDVbrQ" general="_w5ucQJFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5ucTpFcEeK-TsyQVDVbrQ" name="resolvedChoice" visibility="private" type="_w5ucHpFcEeK-TsyQVDVbrQ" association="_w5ucW5FcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucT5FcEeK-TsyQVDVbrQ" annotatedElement="_w5ucTpFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The resolved choice of this resolution.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5ucUJFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5ucUZFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5ucUpFcEeK-TsyQVDVbrQ" name="decision" visibility="private">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucU5FcEeK-TsyQVDVbrQ" annotatedElement="_w5ucUpFcEeK-TsyQVDVbrQ">
            <body>The yes/no decision resolving the choice.</body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://schema.omg.org/spec/UML/2.2/uml.xml#Boolean"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5ucVJFcEeK-TsyQVDVbrQ" name="VInstance">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucVZFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucVJFcEeK-TsyQVDVbrQ">
          <body>&lt;p>A VInstance is a VSpecResolution which resolves a VClassifer by instantiating it. The child resolutions of a VInstance resolve the variability for this specific instance of the VClassifier.&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>Invariant :&lt;/p>&lt;p>The number of childResolutions must be between the lowerMultiplicity and the upperMultiplicity of the instanceMultiplicity if it exists.&lt;/p>&lt;p>If the instance multiplicity does not exists, we have only one child.&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- VInstance&lt;/p>&lt;p>-- nbChildResolution_with_instanceMultiplicity :&lt;/p>&lt;p>-- The number of childResolutions must be between the lowerMultiplicity and the upperMultiplicity of the instanceMultiplicity if it exists&lt;/p>&lt;p>-- If the instance multiplicity does not exists, we have only one child.&lt;/p>&lt;p>context VInstance :&lt;/p>&lt;p>inv nbChildResolution_with_instanceMultiplicity :&lt;/p>&lt;p>if not self.type.instanceMultiplicity->isEmpty()&lt;/p>&lt;p>then (self.childResolution->size() >= self.type.instanceMultiplicity.lower and self.type.instanceMultiplicity.lower &lt;> -1&lt;/p>&lt;p>and self.childResolution->size() &lt;= self.type.instanceMultiplicity.upper and self.type.instanceMultiplicity.upper &lt;> -1)&lt;/p>&lt;p>-- Infinite upper&lt;/p>&lt;p>or (self.type.instanceMultiplicity.lower &lt;> -1 and self.type.instanceMultiplicity.upper == (-1) and self.childResolution->size() >= self.type.instanceMultiplicity.lower )&lt;/p>&lt;p>-- infinite lower no sense for practical purposes&lt;/p>&lt;p>else&lt;/p>&lt;p>self.childResolution->size() == (1)&lt;/p>&lt;p>endif&lt;/p>&lt;p>&lt;/p>&lt;p>Dynamic semantics&lt;/p>&lt;p>Pre and post condition&lt;/p>&lt;p>Pre-condition :&lt;/p>&lt;p>None&lt;/p>&lt;p>Post-condition:&lt;/p>&lt;p>After a VInstance has been executed, the associated VClassifier is contained in the selected VSpecs set.&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>context VInstance::eval(ctx : CVLExecutionContext)&lt;/p>&lt;p>pre :&lt;/p>&lt;p>post : ctx.selectedVSpecs->includes(self.type)&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5ucVpFcEeK-TsyQVDVbrQ" general="_w5ucQJFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5ucV5FcEeK-TsyQVDVbrQ" name="type" visibility="private" type="_w5ucJ5FcEeK-TsyQVDVbrQ" association="_w5ucYJFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucWJFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucV5FcEeK-TsyQVDVbrQ">
            <body>&lt;p>Type of the VInstance.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5ucWZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5ucWpFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5ucW5FcEeK-TsyQVDVbrQ" name="A_ChoiceResolution_Choice" memberEnd="_w5ucTpFcEeK-TsyQVDVbrQ _w5ucXZFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucXJFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucW5FcEeK-TsyQVDVbrQ">
          <body>&lt;p>The choice decided by this resolution.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5ucXZFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5ucS5FcEeK-TsyQVDVbrQ" association="_w5ucW5FcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5ucXpFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5ucX5FcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5ucYJFcEeK-TsyQVDVbrQ" name="A_VInstance_VClassifier" memberEnd="_w5ucV5FcEeK-TsyQVDVbrQ _w5ucYpFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucYZFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucYJFcEeK-TsyQVDVbrQ">
          <body>&lt;p>The VClassifier instantiated by this VInstance.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5ucYpFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5ucVJFcEeK-TsyQVDVbrQ" association="_w5ucYJFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5ucY5FcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5ucZJFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5ucZZFcEeK-TsyQVDVbrQ" name="VariationPoint" isAbstract="true">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucZpFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucZZFcEeK-TsyQVDVbrQ">
          <body>&lt;p class=&quot;MsoNormal&quot;>&lt;span style=&quot;font-size:8pt;font-family:Tahoma;&quot;>&lt;span style=&quot;color:#000000;&quot;>A variation points is a specification of concrete variability in the base model. &lt;/span>Variation points define specific modifications to be applied to the base model during materialization. They refer to base model elements via base model handles and are bound to VSpecs. &lt;span style=&quot;color:#000000;&quot;>Binding a variation point to a VSpec means that the application of the variation point to the base model during materialization depends on the resolution for the VSpec. The nature of the dependency is specific to the kind of variation point. &lt;/span>&lt;/span>&lt;span style=&quot;font-size:8pt;font-family:Sylfaen;&quot;>&lt;span style=&quot;color:#000000;&quot;>&lt;span style=&quot;font-family:Tahoma;&quot;>&lt;/span>&lt;/span>&lt;/span>&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5ucZ5FcEeK-TsyQVDVbrQ" general="_w5vDL5FcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5ucaJFcEeK-TsyQVDVbrQ" name="bindingVSpec" visibility="private" type="_w5ucLpFcEeK-TsyQVDVbrQ" association="_w5uc55FcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucaZFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucaJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The VSpecs to which the variation point is bound.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5ucapFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5uca5FcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5ucbJFcEeK-TsyQVDVbrQ" name="FragmentSubstitution">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucbZFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucbJFcEeK-TsyQVDVbrQ">
          <body>&lt;p>Fragment Substitution substitutes a placement fragment of the base model with one or more replacement fragments of the base model.&lt;/p>&lt;p>Constraints:&lt;/p>&lt;p>The boundary elements define all references going in and out of the placement fragment. The boundary elements fully define all references going in and out of the replacement fragment.&lt;/p>&lt;p>Semantics:&lt;/p>&lt;p>1. Delete the model elements defined by the PlacementFragment. The placement model elements can be found through FragmentSubstitution.placement's placementBoundaryElements that are of class ToPlacement (using the model element references called insideBoundaryElement) and the transitive closure of all references from these, where the traversal is cut off at any reference that has the same value as any of FragmentSubstitution.placement's PlacementBoundardyElement that are of class FromPlacement (using the model element references called outsideBoundaryElement).&lt;/p>&lt;p>&lt;br>2. For the replacement fragments, copy its content onto the hole made by the deletion of the placement fragment. The placement and replacement boundary elements must correspond. The content model elements can be found through FragmentSubstitution. replacement's ReplacementBoundaryElement that are of type ToReplacement (using the model element references called insideBoundaryElement) and all model elements found through the transitive closure of all references from this set of model elements, where the traversal is cut off at any reference that has the same value as any of FragmentSubstitution.replacement's ReplacementBoundaryElement that are of type FromReplacement (using the model element references called outsideBoundaryElement).&lt;/p>&lt;p>If multi is true, then a number of copies of the replacement fragment will be copied onto the placement. The resolution model will define how many.&lt;/p>&lt;p>Any substitutions addressing placements inside the given replacement fragment will be performed on the copy of the replacement fragment which is the last one generated.&lt;/p>&lt;p>3. Binding boundary elements. The placement and replacement boundary elements are connected by bindings. The bindings are given by the BoundaryElementBindings:&lt;br>1. FromBinding: fromReplacement.insideBoundaryElement.propertyName[] = fromPlacement.outsideBoundaryElement[]&lt;br>2. ToBinding: toPlacement.outsideBoundaryElement.propertyName[] = toReplacement.insideBoundaryElement[]. This definition in fact also covers attributes that have multiplicity. Such attributes may be seen as arrays or collections, and repeated reference assignments to such attributes during variability transformation will mean adding a new individual reference to the identifier collection.&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>&lt;/p>&lt;p>Dynamic semantics&lt;/p>&lt;p>Pre and post condition&lt;/p>&lt;p>Pre-condition : &lt;/p>&lt;p>Before the execution of a Fragment Substitution, the placement fragment must exist in the base model.&lt;/p>&lt;p>Post-condition: &lt;/p>&lt;p>After a FragmentSubstitution has been executed, the placement elements cannot be found in the resolved model whereas the replacement elements are in the resolved model.&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>context FragmentSubstitution::eval(ctx : CVLExecutionContext)&lt;/p>&lt;p>pre : &lt;/p>&lt;p>self.boundaryElementBinding-&amp;gt;forAll(boundaryElt |boundaryElt.oclIsTypeOf(ToBinding) implies boundaryElt.oclAsType(ToBinding).toPlacement.insideBoundaryElement-&amp;gt;forAll(e |  ctx.resolvedModelElements-&amp;gt;includes(e)) )&lt;/p>&lt;p>post :&lt;/p>&lt;p> self.boundaryElementBinding-&amp;gt;forAll(boundaryElt |boundaryElt.oclIsTypeOf(ToBinding) implies boundaryElt.oclAsType(ToBinding).toPlacement.insideBoundaryElement-&amp;gt;forAll(e | not ctx.resolvedModelElements-&amp;gt;includes(e)) )&lt;/p>&lt;p>           and self.boundaryElementBinding-&amp;gt;forAll(boundaryElt |boundaryElt.oclIsTypeOf(ToBinding) implies boundaryElt.oclAsType(ToBinding).toReplacement.insideBoundaryElement-&amp;gt;forAll(e |  ctx.resolvedModelElements-&amp;gt;includes(e)) )&lt;/p>&lt;p>Note : FragmentSubstitution needs the use of FromBinding and ToBinding metaclasses (please refer to the corresponding pre and post conditions).&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p>&lt;p>&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5ucbpFcEeK-TsyQVDVbrQ" general="_w5vEJZFcEeK-TsyQVDVbrQ"/>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5ucb5FcEeK-TsyQVDVbrQ" general="_w5vEM5FcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5uccJFcEeK-TsyQVDVbrQ" name="boundaryElementBinding" visibility="private" type="_w5vDXpFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vDYJFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5uccZFcEeK-TsyQVDVbrQ" annotatedElement="_w5uccJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>&#xD;
    Specifies the binding between the placement and replacement fragments.&#xD;
&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5uccpFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5ucc5FcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5ucdJFcEeK-TsyQVDVbrQ" name="placement" visibility="private" type="_w5vDepFcEeK-TsyQVDVbrQ" association="_w5vD15FcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucdZFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucdJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>&#xD;
    Specifies the fragment to be replaced.&#xD;
&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5ucdpFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5ucd5FcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5uceJFcEeK-TsyQVDVbrQ" name="multi" visibility="private">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5uceZFcEeK-TsyQVDVbrQ" annotatedElement="_w5uceJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Indicates multiple fragment substitution.&lt;/p></body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://schema.omg.org/spec/UML/2.2/uml.xml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5ucepFcEeK-TsyQVDVbrQ" name="replacement" visibility="private" type="_w5uczJFcEeK-TsyQVDVbrQ" association="_w5vqGJFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5uce5FcEeK-TsyQVDVbrQ" annotatedElement="_w5ucepFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Specifies the replacement to be utilized.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5ucfJFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5ucfZFcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5ucfpFcEeK-TsyQVDVbrQ" name="ObjectSubstitution">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucf5FcEeK-TsyQVDVbrQ" annotatedElement="_w5ucfpFcEeK-TsyQVDVbrQ">
          <body>&lt;p>An ObjectSubstitution is a choice variation point which specifies that an object of the base model, called the replacement, may be substituted for another, called the placement. The placement and replacement objects are specified via object handles identifying base model objects.&lt;/p>&lt;p>When this variation point is applied, all links touching the placement are redirected to the replacement and the placement is deleted.&lt;br>&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>Invariant : An ObjectSubstitution may not be bound to a VClassifier&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- ObjectSubstitution&lt;/p>&lt;p>-- An ObjectSubstitution may not be bound to a VClassifier&lt;/p>&lt;p>context ObjectSubstitution :&lt;/p>&lt;p>inv notBoundToAVClassifier :&lt;/p>&lt;p>not (self.bindingVspec->exists( vspec | vspec.oclIsTypeOf(VClassifier)))&lt;/p>&lt;p>Dynamic semantics&lt;/p>&lt;p>Pre and post conditions&lt;/p>&lt;p>Pre-condition :&lt;/p>&lt;p>Before the execution of an ObjectSubstitution, placement and replacement object must exist in the base model.&lt;/p>&lt;p>Post-condition:&lt;/p>&lt;p>After an Object Substitution has been executed, the replacement object must exist in the resolved model whereas the placement object cannot be found in the resolved model.&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- ObjectSubstitution&lt;/p>&lt;p>context ObjectSubstitution::eval(ctx : CVLExecutionContext)&lt;/p>&lt;p>pre:&lt;/p>&lt;p>ctx.resolvedModelElements->includes( self.placementObject)&lt;/p>&lt;p>and ctx.resolvedModelElements->includes( self.replacementObject)&lt;/p>&lt;p>post:&lt;/p>&lt;p>ctx.resolvedModelElements->includes( self.replacementObject)&lt;/p>&lt;p>and not ctx.resolvedModelElements->includes( self.placementObject)&lt;/p>&lt;p>&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5ucgJFcEeK-TsyQVDVbrQ" general="_w5vEJZFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5ucgZFcEeK-TsyQVDVbrQ" name="placementObject" visibility="private" type="_w5vDGpFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vDT5FcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucgpFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucgZFcEeK-TsyQVDVbrQ">
            <body>The&amp;nbsp;object handle identifying the base model object&amp;nbsp;to&amp;nbsp;be&amp;nbsp;replaced&amp;nbsp;by&amp;nbsp;the replacement&#xD;
object&amp;nbsp;in&amp;nbsp;this&amp;nbsp;substitution.</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5ucg5FcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5uchJFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5uchZFcEeK-TsyQVDVbrQ" name="replacementObject" visibility="private" type="_w5vDGpFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vDVJFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5uchpFcEeK-TsyQVDVbrQ" annotatedElement="_w5uchZFcEeK-TsyQVDVbrQ">
            <body>The&amp;nbsp;object handle identifying the base model object&amp;nbsp;replacing&amp;nbsp;to&amp;nbsp;the&amp;nbsp;placement&amp;nbsp;object in this&#xD;
substitution. If no replacement is specified then the object is expected to arrive in a variable, that is the variation&#xD;
point must be bound to a variable to be acted on.</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5uch5FcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5uciJFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5uciZFcEeK-TsyQVDVbrQ" name="MultiplicityInterval">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucipFcEeK-TsyQVDVbrQ" annotatedElement="_w5uciZFcEeK-TsyQVDVbrQ">
          <body>&lt;p>A MultiplicityInterval specifies lower and upper multiplicities.&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>&lt;b>&lt;/b>Invariant :&lt;b>&lt;/b> The value of the lower multiplicity must be inferior or equal to the upper multiplicity&lt;/p>&lt;p>&lt;b>&lt;/b>OCL :&lt;b>&lt;/b>&lt;/p>&lt;p>-- MultiplicityInterval&lt;/p>&lt;p>-- lower_inferior_upper : The value of the lower multiplicity must be inferior or equal to the upper multiplicity&lt;/p>&lt;p>context MultiplicityInterval :&lt;/p>&lt;p>inv lower_inferior_upper :&lt;/p>&lt;p>(self.upper == (-1))&lt;/p>&lt;p>or (self.lower &amp;lt;&amp;gt; -1 and self.upper &amp;lt;&amp;gt; -1 and self.lower &amp;lt;= self.upper)&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p></body>
        </ownedComment>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5uci5FcEeK-TsyQVDVbrQ" name="upper" visibility="private">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucjJFcEeK-TsyQVDVbrQ" annotatedElement="_w5uci5FcEeK-TsyQVDVbrQ">
            <body>&lt;p>&#xD;
    The upper multiplicity.&#xD;
&lt;/p></body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://schema.omg.org/spec/UML/2.2/uml.xml#Integer"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5ucjZFcEeK-TsyQVDVbrQ" name="lower" visibility="private">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucjpFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucjZFcEeK-TsyQVDVbrQ">
            <body>&lt;p>&#xD;
    The lower multiplicity.&#xD;
&lt;/p></body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://schema.omg.org/spec/UML/2.2/uml.xml#Integer"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5ucj5FcEeK-TsyQVDVbrQ" name="A_VClassifier_MultiplicityInterval" memberEnd="_w5ucKpFcEeK-TsyQVDVbrQ _w5uckZFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5uckJFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucj5FcEeK-TsyQVDVbrQ">
          <body>&lt;p>The instance multiplicity of the VClassifier.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5uckZFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5ucJ5FcEeK-TsyQVDVbrQ" association="_w5ucj5FcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5uckpFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5uck5FcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5uclJFcEeK-TsyQVDVbrQ" name="A_VSpec_MultiplicityInterval" memberEnd="_w5ucMpFcEeK-TsyQVDVbrQ _w5uclpFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5uclZFcEeK-TsyQVDVbrQ" annotatedElement="_w5uclJFcEeK-TsyQVDVbrQ">
          <body>&lt;p>The group multiplicity of the CVSpec.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5uclpFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5ucLpFcEeK-TsyQVDVbrQ" association="_w5uclJFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5ucl5FcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5ucmJFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5ucmZFcEeK-TsyQVDVbrQ" name="Variable">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucmpFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucmZFcEeK-TsyQVDVbrQ">
          <body>&lt;p class=&quot;MsoNormal&quot;>&lt;span style=&quot;font-size:8pt;font-family:Tahoma;&quot;>A variable is a VSpec whose resolution requires providing a value of its specified type. When a parametric variation point is bound to a variable, the value provided for the variable as resolution will be used as the actual parameter when applying the variation point during materialization.&lt;/span>&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5ucm5FcEeK-TsyQVDVbrQ" general="_w5ucLpFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5ucnJFcEeK-TsyQVDVbrQ" name="replacementFragmentType {subsets type}" visibility="private" type="_w5uczJFcEeK-TsyQVDVbrQ" association="_w5vD95FcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucnZFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucnJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The optional ReplacementFragmentType.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5ucnpFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5ucn5FcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5ucoJFcEeK-TsyQVDVbrQ" name="defaulValue" visibility="private" type="_w5ucuJFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vEHJFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucoZFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucoJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The default value of this Variable.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5ucopFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5uco5FcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5ucpJFcEeK-TsyQVDVbrQ" name="type" visibility="private" type="_w5vqL5FcEeK-TsyQVDVbrQ" association="_w5vqMZFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucpZFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucpJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The type of the variable.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5ucppFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5ucp5FcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5ucqJFcEeK-TsyQVDVbrQ" name="VariableValueAssignment">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucqZFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucqJFcEeK-TsyQVDVbrQ">
          <body>&lt;p>A VariableValueAssignment is a VSpecResolution which resolves a variables by providing a value of the variable's type.&lt;/p>&lt;p>&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>&lt;/p>&lt;p>Dynamic semantics&lt;/p>&lt;p>Pre and post condition&lt;/p>&lt;p>Pre-condition :&lt;/p>&lt;p>Before the execution of a VariableValueAssignment, the variable stored in the VariableValueAssignment must exist in the variable dictionary.&lt;/p>&lt;p>Post-condition:&lt;/p>&lt;p>After a VariableValueAssignment has been executed, the resolvedVariable is assigned with the value.&lt;/p>&lt;p>&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>context VariableValueAssignment::eval(ctx : CVLExecutionContext) :&lt;/p>&lt;p>pre: not ctx.variabledictionary-&amp;gt;exists(p | p.elements-&amp;gt;exists ( k | k.key == (self.resolvedVariable.name)))&lt;/p>&lt;p>post: ctx.variabledictionary-&amp;gt;exists(p | p.elements-&amp;gt;exists ( k| k.key == (self.resolvedVariable.name) and k.value == (self.value)) )&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5ucqpFcEeK-TsyQVDVbrQ" general="_w5ucQJFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5ucq5FcEeK-TsyQVDVbrQ" name="resolvedVariable" visibility="private" type="_w5ucmZFcEeK-TsyQVDVbrQ" association="_w5ucs5FcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucrJFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucq5FcEeK-TsyQVDVbrQ">
            <body>&lt;p>The resolved variable.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5ucrZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5ucrpFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5ucr5FcEeK-TsyQVDVbrQ" name="value" visibility="private" type="_w5ucuJFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5ucvpFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucsJFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucr5FcEeK-TsyQVDVbrQ">
            <body>&lt;p>The value assigned.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5ucsZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5ucspFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5ucs5FcEeK-TsyQVDVbrQ" name="A_VariableValueAssignment_Variable" memberEnd="_w5ucq5FcEeK-TsyQVDVbrQ _w5uctZFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5uctJFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucs5FcEeK-TsyQVDVbrQ">
          <body>&lt;p>The variable resolved, i.e. given a value, by this resolution.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5uctZFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5ucqJFcEeK-TsyQVDVbrQ" association="_w5ucs5FcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5uctpFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5uct5FcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5ucuJFcEeK-TsyQVDVbrQ" name="ValueSpecification" isAbstract="true">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucuZFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucuJFcEeK-TsyQVDVbrQ">
          <body>&lt;p>&#xD;
    A ValueSpecification specifies a value which is either primitive, or an object of the base mode,&amp;nbsp;or a fragment of&#xD;
    the base model.&amp;nbsp;&#xD;
&lt;/p></body>
        </ownedComment>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5ucupFcEeK-TsyQVDVbrQ" name="type" visibility="private" type="_w5vqL5FcEeK-TsyQVDVbrQ" isDerived="true" association="_w5vqNZFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucu5FcEeK-TsyQVDVbrQ" annotatedElement="_w5ucupFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The type of the ValueSpecification.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5ucvJFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5ucvZFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5ucvpFcEeK-TsyQVDVbrQ" name="A_VariableValueAssignment_ValueSpecification" memberEnd="_w5ucr5FcEeK-TsyQVDVbrQ _w5ucv5FcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5ucv5FcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5ucqJFcEeK-TsyQVDVbrQ" association="_w5ucvpFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5ucwJFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5ucwZFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5ucwpFcEeK-TsyQVDVbrQ" name="PrimitveType">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucw5FcEeK-TsyQVDVbrQ" annotatedElement="_w5ucwpFcEeK-TsyQVDVbrQ">
          <body>&lt;p>A type of a variable which is either String, Integer,UnlimitedNatural, Real, or Boolean.&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5ucxJFcEeK-TsyQVDVbrQ" general="_w5vqL5FcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5ucxZFcEeK-TsyQVDVbrQ" name="type" visibility="private" type="_w5ucEpFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucxpFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucxZFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The primitive type as an enumeration value.&lt;/p></body>
          </ownedComment>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5ucx5FcEeK-TsyQVDVbrQ" name="ObjectType">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucyJFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucx5FcEeK-TsyQVDVbrQ">
          <body>A type of objects in the base model, specified as a metaclass in the metamodel of which the base model in an instance.</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5ucyZFcEeK-TsyQVDVbrQ" general="_w5vqL5FcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5ucypFcEeK-TsyQVDVbrQ" name="metaClass" visibility="private">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5ucy5FcEeK-TsyQVDVbrQ" annotatedElement="_w5ucypFcEeK-TsyQVDVbrQ">
            <body>The name of the metaclass in the metamodel of which the base model is an instance.</body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://schema.omg.org/spec/UML/2.2/uml.xml#String"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5uczJFcEeK-TsyQVDVbrQ" name="ReplacementFragmentType">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5uczZFcEeK-TsyQVDVbrQ" annotatedElement="_w5uczJFcEeK-TsyQVDVbrQ">
          <body>&lt;p>Replacement Fragment Type defines a fragment of the base model that will be used as replacement for some placement fragment&lt;br>of the base model.&lt;/p>&lt;p>Constraints:&lt;/p>&lt;p>The placements contained in a replacement fragments should only involve model elements which are inside the replacement fragment. These placements can be used in all instances of a replacement fragment.&lt;/p>&lt;p>Semantics:&lt;/p>&lt;p>The semantics of Replacement Fragment Type can be found under Fragment Substitution.&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>Invariant :&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p>&lt;p>&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5uczpFcEeK-TsyQVDVbrQ" general="_w5vqL5FcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5ucz5FcEeK-TsyQVDVbrQ" name="replacementBoundaryElement" visibility="private" type="_w5vDq5FcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vDrZFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5uc0JFcEeK-TsyQVDVbrQ" annotatedElement="_w5ucz5FcEeK-TsyQVDVbrQ">
            <body>The boundary elements captures all the relations from and to the fragment.</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5uc0ZFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5uc0pFcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5uc05FcEeK-TsyQVDVbrQ" name="placementFragment" visibility="private" type="_w5vDepFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vD25FcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5uc1JFcEeK-TsyQVDVbrQ" annotatedElement="_w5uc05FcEeK-TsyQVDVbrQ">
            <body>Set of placements contained by the replacement fragment.</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5uc1ZFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5uc1pFcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5uc15FcEeK-TsyQVDVbrQ" name="VInterface">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5uc2JFcEeK-TsyQVDVbrQ" annotatedElement="_w5uc15FcEeK-TsyQVDVbrQ">
          <body>&lt;p>A VInterface is a collection of VSpecs, possibly organized in tree structures, which serves to specify what it takes to materialize a configurable unit.&lt;span>  &lt;/span>Each Configurable unit must be bound to a CVSpec typed by a VInterface. The VInterface may be thought of as the &quot;variability type&quot; or &quot;configuration type&quot; of the configurable unit. A VInterface can be declared as the configuration type of several configurable units since several CVSpecs may be typed by the same VInterface.&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5uc2ZFcEeK-TsyQVDVbrQ" general="_w5vDL5FcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5uc2pFcEeK-TsyQVDVbrQ" name="member" visibility="private" type="_w5ucLpFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vCzZFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5uc25FcEeK-TsyQVDVbrQ" annotatedElement="_w5uc2pFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The members of the interface.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5uc3JFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5uc3ZFcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5uc3pFcEeK-TsyQVDVbrQ" name="ownedConstraint" visibility="private" type="_w5vqm5FcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vEFJFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5uc35FcEeK-TsyQVDVbrQ" annotatedElement="_w5uc3pFcEeK-TsyQVDVbrQ">
            <body>Constraints&amp;nbsp;over&amp;nbsp;the&amp;nbsp;VSPecs&amp;nbsp;over&amp;nbsp;this&amp;nbsp;VInterface</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5uc4JFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5uc4ZFcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5uc4pFcEeK-TsyQVDVbrQ" name="A_VSpecResolution_VSpec" memberEnd="_w5ucQ5FcEeK-TsyQVDVbrQ _w5uc5JFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5uc45FcEeK-TsyQVDVbrQ" annotatedElement="_w5uc4pFcEeK-TsyQVDVbrQ">
          <body>&lt;p>The Vspec resolved by this resolution.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5uc5JFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5ucQJFcEeK-TsyQVDVbrQ" association="_w5uc4pFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5uc5ZFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5uc5pFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5uc55FcEeK-TsyQVDVbrQ" name="A_VariationPoint_VSpec" memberEnd="_w5ucaJFcEeK-TsyQVDVbrQ _w5uc6ZFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5uc6JFcEeK-TsyQVDVbrQ" annotatedElement="_w5uc55FcEeK-TsyQVDVbrQ">
          <body>&lt;p>The VSpec to which the variation point is bound.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5uc6ZFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5ucZZFcEeK-TsyQVDVbrQ" association="_w5uc55FcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5uc6pFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5uc65FcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5uc7JFcEeK-TsyQVDVbrQ" name="SlotAssignment">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5uc7ZFcEeK-TsyQVDVbrQ" annotatedElement="_w5uc7JFcEeK-TsyQVDVbrQ">
          <body>&lt;p>A slot assignment is a choice variation point which specifies a value to be assigned to a particular slot in a particular object in the base model. The object is identified via an object handle pointing to the base model, and the slot is identified via its name, stored in the slotIdentifier attribute. The value to be assigned is specified explicitly.&lt;/p>&lt;p>When this variation point is applied, the specified value is inserted into the base model slot.&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>Invariant&lt;/p>&lt;p>Invariant : The property named as self.slotIdentifier must exist in the slotOwner object&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- SlotAssigmnent&lt;/p>&lt;p>-- The property named as self.slotIdentifier must exist in the slotOwner object&lt;/p>&lt;p>context SlotAssignment :&lt;/p>&lt;p>inv propertyIn_slotOwner :&lt;/p>&lt;p>if self.SlotOwner&lt;/p>&lt;p>null&lt;/p>&lt;p>then&lt;/p>&lt;p>self.SlotOwner.getPropertyByName(self.slotIdentifier)&lt;/p>&lt;p>null&lt;/p>&lt;p>else&lt;/p>&lt;p>-- if SlotOwner does not exists neither the property&lt;/p>&lt;p>false&lt;/p>&lt;p>endif&lt;/p>&lt;p>Dynamic semantics&lt;/p>&lt;p>Pre and post condition&lt;/p>&lt;p>Pre-condition :&lt;/p>&lt;p>Before the execution of a SlotAssignment, the SlotOwner object must exist in the base model and it must have a MOF property called as in the slotIdentifier.&lt;/p>&lt;p>Post-condition:&lt;/p>&lt;p>After a SlotAssignment has been executed, the MOF property called as in the slotIdentifier in the SlotOwner has been assigned with the value value.&lt;/p>&lt;p>Note : To express more easily this OCL pre condition, we add the operations getPropertyByName(String propertyName) and getPropertyValue(String propertyName) on the ObjectHandle metaclass to obtain respectively the property with the given name and the value associated with this property.&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>context SlotAssignment::eval(ctx : CVLExecutionContext)&lt;/p>&lt;p>pre : self.SlotOwner&lt;/p>&lt;p>null and ctx.resolvedModelElements->includes(self.SlotOwner) and self.SlotOwner->asOrderedSet()->first().getPropertyByName(self.slotIdentifier)&lt;/p>&lt;p>null&lt;/p>&lt;p>post : self.SlotOwner->asOrderedSet()->first().getPropertyValue(self.slotIdentifier)->asOrderedSet()->first() == (self.value)&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5uc7pFcEeK-TsyQVDVbrQ" general="_w5vEJZFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5uc75FcEeK-TsyQVDVbrQ" name="slotIdentifier" visibility="private">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5uc8JFcEeK-TsyQVDVbrQ" annotatedElement="_w5uc75FcEeK-TsyQVDVbrQ">
            <body>The name of the MOF Property&amp;nbsp;in the object's metaclass identifying the slot to which the value is to be assigned.</body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://schema.omg.org/spec/UML/2.2/uml.xml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5uc8ZFcEeK-TsyQVDVbrQ" name="value" visibility="private" type="_w5ucuJFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vDRpFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5uc8pFcEeK-TsyQVDVbrQ" annotatedElement="_w5uc8ZFcEeK-TsyQVDVbrQ">
            <body>The value to be assigned.</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5uc85FcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5uc9JFcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5uc9ZFcEeK-TsyQVDVbrQ" name="slotOwner" visibility="private" type="_w5vDGpFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vDSpFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5uc9pFcEeK-TsyQVDVbrQ" annotatedElement="_w5uc9ZFcEeK-TsyQVDVbrQ">
            <body>The object handle identifying the base model object to whose slot the value is to be assigned.</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5uc95FcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5uc-JFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5uc-ZFcEeK-TsyQVDVbrQ" name="ObjectExistence">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5uc-pFcEeK-TsyQVDVbrQ" annotatedElement="_w5uc-ZFcEeK-TsyQVDVbrQ">
          <body>&lt;p>ObjectExistence is a choice variation point which indicates that an object of the base model may or may not exist in the materialized model. The object is identified via an object handle. When this variation point is applied the object identified in the base model as the optionalObject is deleted.&lt;br>&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>Invariant&lt;/p>&lt;p>Invariant : An ObjectExistence must be bound to a Choice, not to a variable or to a classifier&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- ObjectExistence&lt;/p>&lt;p>-- An ObjectExistence must be bound to a Choice, not to a variable or to a classifier&lt;/p>&lt;p>context ObjectExistence :&lt;/p>&lt;p>inv must_bound_to_choice :&lt;/p>&lt;p>(self.bindingVspec->exists( vspec | vspec.oclIsTypeOf(Choice)))&lt;/p>&lt;p>and not ( (self.bindingVspec->exists( vspec | vspec.oclIsTypeOf(Variable))))&lt;/p>&lt;p>and not ( (self.bindingVspec->exists( vspec | vspec.oclIsTypeOf(VClassifier))))&lt;/p>&lt;p>Dynamic semantics&lt;/p>&lt;p>Pre and post condition&lt;/p>&lt;p>Pre-condition :&lt;/p>&lt;p>None&lt;/p>&lt;p>Post-condition:&lt;/p>&lt;p>After an ObjectExistence has been executed, the optionalObject must be in the resolved model otherwise it cannot be in the resolved model.&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- ObjectExistence&lt;/p>&lt;p>context ObjectExistence::eval(ctx : CVLExecutionContext)&lt;/p>&lt;p>pre :&lt;/p>&lt;p>post:&lt;/p>&lt;p>ctx.selectedVSpecs->includes(self.bindingVspec->asOrderedSet()->first()) implies ctx.resolvedModelElements->includes(self.optionalObject) and&lt;/p>&lt;p>ctx.unselectedVSpecs->includes((self.bindingVspec->asOrderedSet()->first())) implies not ctx.resolvedModelElements->includes(self.optionalObject)&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5uc-5FcEeK-TsyQVDVbrQ" general="_w5vEJZFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5uc_JFcEeK-TsyQVDVbrQ" name="optionalObject" visibility="private" type="_w5vDGpFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vDPJFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5uc_ZFcEeK-TsyQVDVbrQ" annotatedElement="_w5uc_JFcEeK-TsyQVDVbrQ">
            <body>The&amp;nbsp;object&amp;nbsp;handle&amp;nbsp;identifying&amp;nbsp;the&amp;nbsp;base&amp;nbsp;model&amp;nbsp;object&amp;nbsp;whose&amp;nbsp;existence&amp;nbsp;is&amp;nbsp;in&amp;nbsp;question.</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5uc_pFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5uc_5FcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5udAJFcEeK-TsyQVDVbrQ" name="LinkEndSubstitution">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5udAZFcEeK-TsyQVDVbrQ" annotatedElement="_w5udAJFcEeK-TsyQVDVbrQ">
          <body>&lt;p>A LinkEndSubstitution is a choice variation point which specifies that an object in the base model, called the replacement, may be substituted for another as the end of a particular link in the base model. The link-end is identified via a link handle referencing the base model plus a string representing a MOF property owned by the association of which the link is an instance. The placement is specified via an object handle.&lt;/p>&lt;p>When this variation point is applied,the link-end is redirected to the replacement object.&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>Dynamic semantics&lt;/p>&lt;p>Pre and post condition&lt;/p>&lt;p>Pre-condition :&lt;/p>&lt;p>None&lt;/p>&lt;p>Post-condition:&lt;/p>&lt;p>After a Link Assignment has been executed, the newEnd object handle must be an end of the LinkHandle link.&lt;/p>&lt;p>&lt;/p>&lt;p>Note : To express more easily this OCL pre condition, we add an operation getEnd() on the LinkHandle metaclass. This operation computes the respective end of this linkHandle.&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- LinkAssignment&lt;/p>&lt;p>context LinkAssignment::eval(ctx : CVLExecutionContext)&lt;/p>&lt;p>pre :&lt;/p>&lt;p>post : self.link.getEnd()->includes(self.newEnd)&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5udApFcEeK-TsyQVDVbrQ" general="_w5vEJZFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5udA5FcEeK-TsyQVDVbrQ" name="link" visibility="private" type="_w5vDI5FcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vDQZFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5udBJFcEeK-TsyQVDVbrQ" annotatedElement="_w5udA5FcEeK-TsyQVDVbrQ">
            <body>&lt;p>Reference to the link.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5udBZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5udBpFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5udB5FcEeK-TsyQVDVbrQ" name="linkEndIdentifier" visibility="private">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5udCJFcEeK-TsyQVDVbrQ" annotatedElement="_w5udB5FcEeK-TsyQVDVbrQ">
            <body>The name of the MOF Property&amp;nbsp;in the object's metaclass identifying the link-end where this substitution occurs.</body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://schema.omg.org/spec/UML/2.2/uml.xml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5udCZFcEeK-TsyQVDVbrQ" name="replacementObject" visibility="private" type="_w5vDGpFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vDWZFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5udCpFcEeK-TsyQVDVbrQ" annotatedElement="_w5udCZFcEeK-TsyQVDVbrQ">
            <body>The&amp;nbsp;object handle identifying the base model object&amp;nbsp;replacing&amp;nbsp;the link-end in this substitution. If no&#xD;
replacement is specified then the object is expected to arrive in a variable, that is the variation point must be bound to&#xD;
a variable to be acted on.</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5udC5FcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5udDJFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5udDZFcEeK-TsyQVDVbrQ" name="ConfigurableUnit">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5udDpFcEeK-TsyQVDVbrQ" annotatedElement="_w5udDZFcEeK-TsyQVDVbrQ">
          <body>&lt;p>&lt;span style=&quot;font-size:10pt;font-family:&quot;Times New Roman&quot;;&quot;>&lt;/span>&lt;span style=&quot;font-size:8pt;&quot;>&lt;span style=&quot;font-family:&quot;Times New Roman&quot;;&quot;>A&lt;/span> configurable unit (CU) is a kind of variation point which references a base model object, and by doing so indicates the object is a container with inner variability. The latter is specified via contained variation points, so a configurable unit is a kind of variation point which may contain other variation points.&lt;/span>&lt;/p>&lt;p>&lt;span style=&quot;font-size:8pt;&quot;>A configurable unit represents &lt;span style=&quot;color:#000000;&quot;>a base model object which is a reusable component, configurable via an exposed variability interface&lt;/span>. The base model object is a container of other base model elements – objects and links – and the CVL configurable unit is a container of variation points defined against those elements, bound to VSpecs. For example, a configurable unit may have associated with it a UML package and contain variation points defined over elements in that package.&lt;/span>&lt;/p>&lt;p>&lt;span style=&quot;font-size:8pt;&quot;>A CU hides its internals and exposes a variability interface (VInterface) to the external world, through which it may be configured. This is achieved by binding the CU to a CVSpec, whose type is the exposed interface. The configurable unit may then be configured by providing resolutions to the VSpecs in its interface.&lt;/span>&lt;/p>&lt;p>&lt;span style=&quot;font-size:8pt;&quot;>Conceptually, a configurable unit and the base model object associated with it are one unified entity representing a reusable base model component. So the UML package above may be thought of as being configurable, though technically it is an external CVL element referencing the object through a handle.&lt;br>&lt;br>CVL configurable units may contain other units, re-iterating the modular structure of the base model. For example, a UML package and a contained class may both be configurable, which means there will be two CVL configurable units, one for the package and one for the class, where the unit for the package contains that for the class. In this way, in addition to facilitating reusable components, configurable units also facilitate modular design.&lt;/span>&lt;/p>&lt;p>&lt;span style=&quot;font-size:8pt;&quot;>Configurable units are also packaging/shipping elements and as such may also contain constraints, VSpec derivations, and VSpec resolutions.&lt;/span>&lt;/p>&lt;p>&lt;span style=&quot;font-size:10pt;&quot;>####CVLSemanticStart####&lt;/span>&lt;/p>&lt;p>Invariant :&lt;/p>&lt;p>Elements contained in the Configurable Unit associated with a given CVSpec must only point on elements in Interface associated with this given CVSpec&lt;/p>&lt;p>&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>&lt;/p>&lt;p>-- ConfigurableUnit&lt;/p>&lt;p>-- Elements contained in the Configurable Unit associated with a given CVSpec must only point on elements&lt;/p>&lt;p>-- in Interface associated with this given CVSpec&lt;/p>&lt;p>context ConfigurableUnit :&lt;/p>&lt;p>def : isContained ( in vps : VSpec ) : Boolean =&lt;/p>&lt;p>self.bindingCVSpec.vInterface.vSpec->exists(v | v = vps&lt;/p>&lt;p>or&lt;/p>&lt;p>( if not (v.childVSpec->isEmpty())&lt;/p>&lt;p>then&lt;/p>&lt;p>v.childVSpec->exists (child | isContained (child) = true)&lt;/p>&lt;p>endif&lt;/p>&lt;p>)&lt;/p>&lt;p>)&lt;/p>&lt;p>inv consistencyInInterfacePointedByCVSpec :&lt;/p>&lt;p>not (self.ownedVariationPoint->exists (vp |&lt;/p>&lt;p>-- search in the VSpec&lt;/p>&lt;p>( vp.bindingVspec->exists ( vsp | not isContained(vsp) ) )&lt;/p>&lt;p>))&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5udD5FcEeK-TsyQVDVbrQ" general="_w5vqdpFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5udEJFcEeK-TsyQVDVbrQ" name="ownedVSpec" visibility="private" type="_w5ucLpFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vCxZFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5udEZFcEeK-TsyQVDVbrQ" annotatedElement="_w5udEJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Internal VSpecs of the CU&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5udEpFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5udE5FcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5udFJFcEeK-TsyQVDVbrQ" name="ownedVariationPoint" visibility="private" type="_w5ucZZFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vCyZFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5udFZFcEeK-TsyQVDVbrQ" annotatedElement="_w5udFJFcEeK-TsyQVDVbrQ">
            <body>Internal variation points against the content of the base model object referenced by the unit.</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5udFpFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5udF5FcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5udGJFcEeK-TsyQVDVbrQ" name="ownedConstraint" visibility="private" type="_w5vqm5FcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vEEJFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5udGZFcEeK-TsyQVDVbrQ" annotatedElement="_w5udGJFcEeK-TsyQVDVbrQ">
            <body>The constraints wrt the internal VSPecs of the unit.</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5udGpFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5udG5FcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5udHJFcEeK-TsyQVDVbrQ" name="configurableContainerObject" visibility="private" type="_w5vDGpFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vEGJFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5udHZFcEeK-TsyQVDVbrQ" annotatedElement="_w5udHJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The container object in the base model which is configurable.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5udHpFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5udH5FcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5udIJFcEeK-TsyQVDVbrQ" name="ownedVSpecResolution" visibility="private" type="_w5ucQJFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vql5FcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5udIZFcEeK-TsyQVDVbrQ" annotatedElement="_w5udIJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The owned VSpec resolutions.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5udIpFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5udI5FcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5udJJFcEeK-TsyQVDVbrQ" name="unitInterface" visibility="private" type="_w5uc15FcEeK-TsyQVDVbrQ" isDerived="true" association="_w5vrRJFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5udJZFcEeK-TsyQVDVbrQ" annotatedElement="_w5udJJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The interface of the unit. Derived as the type of the CVSpec to which the unit is bound.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5udJpFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vCwJFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vCwZFcEeK-TsyQVDVbrQ" name="ownedVSpecDerivation" visibility="private" type="_w5vECZFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5wQ4pFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vCwpFcEeK-TsyQVDVbrQ" annotatedElement="_w5vCwZFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The owned VSpec derivations.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vCw5FcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vCxJFcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vCxZFcEeK-TsyQVDVbrQ" name="A_ConfigurableUnit_VSpec" memberEnd="_w5udEJFcEeK-TsyQVDVbrQ _w5vCxpFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vCxpFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5udDZFcEeK-TsyQVDVbrQ" association="_w5vCxZFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vCx5FcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vCyJFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vCyZFcEeK-TsyQVDVbrQ" name="A_ConfigurableUnit_VariationPoint" memberEnd="_w5udFJFcEeK-TsyQVDVbrQ _w5vCypFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vCypFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5udDZFcEeK-TsyQVDVbrQ" association="_w5vCyZFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vCy5FcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vCzJFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vCzZFcEeK-TsyQVDVbrQ" name="A_VInterface_VSpec" memberEnd="_w5uc2pFcEeK-TsyQVDVbrQ _w5vCz5FcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vCzpFcEeK-TsyQVDVbrQ" annotatedElement="_w5vCzZFcEeK-TsyQVDVbrQ">
          <body>&lt;p>The root VSpecs owned by the VInterface.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vCz5FcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5uc15FcEeK-TsyQVDVbrQ" association="_w5vCzZFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vC0JFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vC0ZFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vC0pFcEeK-TsyQVDVbrQ" name="A_VSpecResolution_VSpecResolution" memberEnd="_w5ucR5FcEeK-TsyQVDVbrQ _w5vC1JFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vC05FcEeK-TsyQVDVbrQ" annotatedElement="_w5vC0pFcEeK-TsyQVDVbrQ">
          <body>&lt;p>The children of the VSpec resolution.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vC1JFcEeK-TsyQVDVbrQ" name="parent" visibility="private" type="_w5ucQJFcEeK-TsyQVDVbrQ" association="_w5vC0pFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vC1ZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vC1pFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vC15FcEeK-TsyQVDVbrQ" name="VConfiguration">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vC2JFcEeK-TsyQVDVbrQ" annotatedElement="_w5vC15FcEeK-TsyQVDVbrQ">
          <body>&lt;p>A VConfiguration is a kind of VSpecResolution which resolves a CVSpec by providing resolutions to the VSpecs in its type, which is a VInterface.VConfigurations are used to resolve configurable units.&lt;br>&lt;/p>&lt;p>&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>Invariant : The resolutions in a configuration resolve only VSpecs of its VInterface&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- VConfiguration&lt;/p>&lt;p>-- The resolutions in a configuration resolve only VSpecs of its VInterface&lt;/p>&lt;p>def : isContained ( in vps : VSpec ) : Boolean =&lt;/p>&lt;p>self.resolvedVIRef.vInterface.vSpec->exists(v | v = vps&lt;/p>&lt;p>or&lt;/p>&lt;p>( if not (v.childVSpec->isEmpty())&lt;/p>&lt;p>then&lt;/p>&lt;p>v.childVSpec->exists (child | isContained (child) = true)&lt;/p>&lt;p>endif&lt;/p>&lt;p>)&lt;/p>&lt;p>)&lt;/p>&lt;p>context VConfiguration&lt;/p>&lt;p>inv resolve_only_vspec_in_VInterface :&lt;/p>&lt;p>self.vSpecResolution->forAll(vspecRes | isContained(vspecRes.resolvedVSpec))&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vC2ZFcEeK-TsyQVDVbrQ" general="_w5vDL5FcEeK-TsyQVDVbrQ"/>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vC2pFcEeK-TsyQVDVbrQ" general="_w5ucQJFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vC25FcEeK-TsyQVDVbrQ" name="member" visibility="private" type="_w5ucQJFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vC5ZFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vC3JFcEeK-TsyQVDVbrQ" annotatedElement="_w5vC25FcEeK-TsyQVDVbrQ">
            <body>&lt;p>The members of the VConfiguration.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vC3ZFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vC3pFcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vC35FcEeK-TsyQVDVbrQ" name="isPartial" visibility="private">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vC4JFcEeK-TsyQVDVbrQ" annotatedElement="_w5vC35FcEeK-TsyQVDVbrQ">
            <body>&lt;p>Specifies if the VConfiguration is partial.&lt;/p></body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://schema.omg.org/spec/UML/2.2/uml.xml#Boolean"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vC4ZFcEeK-TsyQVDVbrQ" name="resolvedCVSpec" visibility="private" type="_w5vqI5FcEeK-TsyQVDVbrQ" association="_w5vqHpFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vC4pFcEeK-TsyQVDVbrQ" annotatedElement="_w5vC4ZFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The resolved CVSpec.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vC45FcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vC5JFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vC5ZFcEeK-TsyQVDVbrQ" name="A_VConfiguration_VSpecResolution" memberEnd="_w5vC25FcEeK-TsyQVDVbrQ _w5vC5pFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vC5pFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vC15FcEeK-TsyQVDVbrQ" association="_w5vC5ZFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vC55FcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vC6JFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vC6ZFcEeK-TsyQVDVbrQ" name="LinkExistence">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vC6pFcEeK-TsyQVDVbrQ" annotatedElement="_w5vC6ZFcEeK-TsyQVDVbrQ">
          <body>&lt;p>LinkExistence is a choice variation point which indicates that a link of the base model may or may not exist in the materialized model. The link is identified via a link handle. When this variation point is applied the link identified in the base model as the optionalLink t is deleted.&lt;br>&lt;br>&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>Invariant : A LinkExistence must be bound to a Choice, not to a variable or to a classifier&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- LinkExistence&lt;/p>&lt;p>-- A LinkExistence must be bound to a Choice, not to a variable or to a classifier&lt;/p>&lt;p>context LinkExistence :&lt;/p>&lt;p>inv linkExistence_must_bound_to_choice :&lt;/p>&lt;p>(self.bindingVspec->exists( vspec | vspec.oclIsTypeOf(Choice)))&lt;/p>&lt;p>and (not (self.bindingVspec->exists( vspec | vspec.oclIsTypeOf(Variable))))&lt;/p>&lt;p>and (not (self.bindingVspec->exists( vspec | vspec.oclIsTypeOf(VClassifier))))&lt;/p>&lt;p>&lt;/p>&lt;p>Dynamic semantics&lt;/p>&lt;p>Pre and post condition&lt;/p>&lt;p>Pre-condition :&lt;/p>&lt;p>None&lt;/p>&lt;p>Post-condition:&lt;/p>&lt;p>After a LinkExistence has been executed, the optionalLink must be in the resolved model otherwise it cannot be in the resolved model.&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- LinkExistence&lt;/p>&lt;p>context LinkExistence::eval(ctx : CVLExecutionContext)&lt;/p>&lt;p>pre :&lt;/p>&lt;p>post:&lt;/p>&lt;p>ctx.selectedVSpecs->includes((self.bindingVspec->asOrderedSet()->first())) implies ctx.baseLinks->includes(self.optionalLink) and&lt;/p>&lt;p>ctx.unselectedVSpecs->includes(self.bindingVspec->asOrderedSet()->first()) implies not ctx.baseLinks->includes(self.optionalLink)&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vC65FcEeK-TsyQVDVbrQ" general="_w5vEJZFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vC7JFcEeK-TsyQVDVbrQ" name="optionalLink" visibility="private" type="_w5vDI5FcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vDN5FcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vC7ZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vC7JFcEeK-TsyQVDVbrQ">
            <body>The link handle identifying the base model link whose existence is in question</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vC7pFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vC75FcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vC8JFcEeK-TsyQVDVbrQ" name="OpaqueVariationPoint">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vC8ZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vC8JFcEeK-TsyQVDVbrQ">
          <body>&lt;p>An OpaqueVariationPoint is an executable, domain-specific variation point whose semantics is not defined by CVL. It is the responsibility of the specific domain to execute this kind of variation point.&lt;br>&lt;br>If bound to a choice then an OpaqueVariation point will be executed upon a positive decision. If bound to a VClassifier then it will be executed once for each instance created from it. If bound to a variable then it will be executed when a value is assigned to it, also providing the value as parameter for the execution.&lt;br>&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>&lt;/p>&lt;p>Dynamic semantics&lt;/p>&lt;p>The OpaqueVariationPoint allows user to make use of variations that are not directly defined by CVL. So, its semantics is not detailed here, and we do not have pre and post conditions&lt;/p>&lt;p>Pre and post condition&lt;/p>&lt;p>Pre-condition :&lt;/p>&lt;p>None&lt;/p>&lt;p>Post-condition:&lt;/p>&lt;p>None&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- OpaqueVariationPoint&lt;/p>&lt;p>context OpaqueVariationPoint::eval(ctx : CVLExecutionContext)&lt;/p>&lt;p>pre : true&lt;/p>&lt;p>post : true&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vC8pFcEeK-TsyQVDVbrQ" general="_w5ucZZFcEeK-TsyQVDVbrQ"/>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vC85FcEeK-TsyQVDVbrQ" general="_w5ucZZFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vC9JFcEeK-TsyQVDVbrQ" name="placeHolder" visibility="private" type="_w5vrIJFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vrIpFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vC9ZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vC9JFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The place holder of the OpaqueVariationPoint.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vC9pFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vC95FcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vC-JFcEeK-TsyQVDVbrQ" name="sourceObject" visibility="private" type="_w5vDGpFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vrJpFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vC-ZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vC-JFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The source objects of the OpaqueVariationPoint.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vC-pFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vC-5FcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vC_JFcEeK-TsyQVDVbrQ" name="type" visibility="private" type="_w5vrKpFcEeK-TsyQVDVbrQ" association="_w5vrO5FcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vC_ZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vC_JFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The transformation used by the opaque variation point.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vC_pFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vC_5FcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vDAJFcEeK-TsyQVDVbrQ" name="ObjectSpecification">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDAZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDAJFcEeK-TsyQVDVbrQ">
          <body>An ObjectSpecification specifies a value which is an object of the base mode through an object handle.</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vDApFcEeK-TsyQVDVbrQ" general="_w5ucuJFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vDA5FcEeK-TsyQVDVbrQ" name="type" visibility="private" type="_w5ucx5FcEeK-TsyQVDVbrQ" isDerived="true" association="_w5vDEpFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDBJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDA5FcEeK-TsyQVDVbrQ">
            <body>&lt;p>Type of the object.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDBZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDBpFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vDB5FcEeK-TsyQVDVbrQ" name="object" visibility="private" type="_w5vDGpFcEeK-TsyQVDVbrQ" association="_w5vDH5FcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDCJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDB5FcEeK-TsyQVDVbrQ">
            <body>The object specified.</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDCZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDCpFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vDC5FcEeK-TsyQVDVbrQ" name="ReplacementFragmentSpecification">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDDJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDC5FcEeK-TsyQVDVbrQ">
          <body>A value of ReplacementFragmentType</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vDDZFcEeK-TsyQVDVbrQ" general="_w5ucuJFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vDDpFcEeK-TsyQVDVbrQ" name="type" visibility="private" type="_w5uczJFcEeK-TsyQVDVbrQ" association="_w5vDFpFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDD5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vDDpFcEeK-TsyQVDVbrQ">
            <body>The corresponding ReplacementFragmentType</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDEJFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDEZFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vDEpFcEeK-TsyQVDVbrQ" name="A_ObjectSpecification_ObjectType" memberEnd="_w5vDA5FcEeK-TsyQVDVbrQ _w5vDE5FcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vDE5FcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vDAJFcEeK-TsyQVDVbrQ" association="_w5vDEpFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDFJFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDFZFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vDFpFcEeK-TsyQVDVbrQ" name="APReplacementFragmentSpecification_ReplacementFragmentType" memberEnd="_w5vDDpFcEeK-TsyQVDVbrQ _w5vDF5FcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vDF5FcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vDC5FcEeK-TsyQVDVbrQ" association="_w5vDFpFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDGJFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDGZFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vDGpFcEeK-TsyQVDVbrQ" name="ObjectHandle">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDG5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vDGpFcEeK-TsyQVDVbrQ">
          <body>&lt;p>&#xD;
    An object handle identifies an object of the base model. This Class abstracts over the cross-domain referencing&#xD;
    mechanism needed to refer from CVL elements to base model objects.&#xD;
&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vDHJFcEeK-TsyQVDVbrQ" general="_w5vrIJFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vDHZFcEeK-TsyQVDVbrQ" name="MOFRef" visibility="private">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDHpFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDHZFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Representing a MOF Reference.&lt;/p></body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://schema.omg.org/spec/UML/2.2/uml.xml#String"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vDH5FcEeK-TsyQVDVbrQ" name="A_ObjectSpecification_ObjectHandle" memberEnd="_w5vDB5FcEeK-TsyQVDVbrQ _w5vDIJFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vDIJFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vDAJFcEeK-TsyQVDVbrQ" association="_w5vDH5FcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDIZFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDIpFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vDI5FcEeK-TsyQVDVbrQ" name="LinkHandle">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDJJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDI5FcEeK-TsyQVDVbrQ">
          <body>&lt;p>A link handle identifies a link of the base model. This Class abstracts over the cross-domain referencing mechanism needed to refer from CVL elements to base model links.&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vDJZFcEeK-TsyQVDVbrQ" general="_w5vrIJFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vDJpFcEeK-TsyQVDVbrQ" name="MOFRef" visibility="private">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDJ5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vDJpFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Representing a MOF Reference.&lt;/p></body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://schema.omg.org/spec/UML/2.2/uml.xml#String"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vDKJFcEeK-TsyQVDVbrQ" name="VPackage">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDKZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDKJFcEeK-TsyQVDVbrQ">
          <body>A VPacakge (Variability Package) is the packaging mechanism of CVL.</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vDKpFcEeK-TsyQVDVbrQ" general="_w5vDL5FcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vDK5FcEeK-TsyQVDVbrQ" name="packageElement" visibility="private" type="_w5vDL5FcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vDMpFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDLJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDK5FcEeK-TsyQVDVbrQ">
            <body>&lt;p>Elements contained in this VPackage.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDLZFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDLpFcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vDL5FcEeK-TsyQVDVbrQ" name="VPackageable" isAbstract="true">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDMJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDL5FcEeK-TsyQVDVbrQ">
          <body>&lt;p>A VPackageable is an element that may be owned by a package.&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vDMZFcEeK-TsyQVDVbrQ" general="_w5vrTZFcEeK-TsyQVDVbrQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vDMpFcEeK-TsyQVDVbrQ" name="A_VPackage_VPackageable" memberEnd="_w5vDK5FcEeK-TsyQVDVbrQ _w5vDNJFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDM5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vDMpFcEeK-TsyQVDVbrQ">
          <body>&lt;p>The (CVL) elements contained in theVPackage.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vDNJFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vDKJFcEeK-TsyQVDVbrQ" association="_w5vDMpFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDNZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDNpFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vDN5FcEeK-TsyQVDVbrQ" name="A_LinkExistence_LinkHandle" memberEnd="_w5vC7JFcEeK-TsyQVDVbrQ _w5vDOZFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDOJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDN5FcEeK-TsyQVDVbrQ">
          <body>&lt;p>The base model link whose existence is in question.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vDOZFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vC6ZFcEeK-TsyQVDVbrQ" association="_w5vDN5FcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDOpFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDO5FcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vDPJFcEeK-TsyQVDVbrQ" name="A_ObjectExistence_ObjectHandle" memberEnd="_w5uc_JFcEeK-TsyQVDVbrQ _w5vDPpFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDPZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDPJFcEeK-TsyQVDVbrQ">
          <body>&lt;p>The base model object whose existence is in question.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vDPpFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5uc-ZFcEeK-TsyQVDVbrQ" association="_w5vDPJFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDP5FcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDQJFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vDQZFcEeK-TsyQVDVbrQ" name="A_LinkEndSubstitution_LinkHandle" memberEnd="_w5udA5FcEeK-TsyQVDVbrQ _w5vDQ5FcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDQpFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDQZFcEeK-TsyQVDVbrQ">
          <body>&lt;p>The link whose end is candidate for substitution.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vDQ5FcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5udAJFcEeK-TsyQVDVbrQ" association="_w5vDQZFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDRJFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDRZFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vDRpFcEeK-TsyQVDVbrQ" name="A_SlotAssignment_ValueSpecification" memberEnd="_w5uc8ZFcEeK-TsyQVDVbrQ _w5vDR5FcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vDR5FcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5uc7JFcEeK-TsyQVDVbrQ" association="_w5vDRpFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDSJFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDSZFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vDSpFcEeK-TsyQVDVbrQ" name="A_SlotAssignment_ObjectHandle" memberEnd="_w5uc9ZFcEeK-TsyQVDVbrQ _w5vDTJFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDS5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vDSpFcEeK-TsyQVDVbrQ">
          <body>&lt;p>The base model object whose slot will be assigned a value.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vDTJFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5uc7JFcEeK-TsyQVDVbrQ" association="_w5vDSpFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDTZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDTpFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vDT5FcEeK-TsyQVDVbrQ" name="A_ObjectSubstitution_ObjectHandle_plcmnt" memberEnd="_w5ucgZFcEeK-TsyQVDVbrQ _w5vDUZFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDUJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDT5FcEeK-TsyQVDVbrQ">
          <body>&lt;p>The object the replacement will be substituted for.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vDUZFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5ucfpFcEeK-TsyQVDVbrQ" association="_w5vDT5FcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDUpFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDU5FcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vDVJFcEeK-TsyQVDVbrQ" name="A_ObjectSubstitution_ObjectHandle_replcmnt" memberEnd="_w5uchZFcEeK-TsyQVDVbrQ _w5vDVpFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDVZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDVJFcEeK-TsyQVDVbrQ">
          <body>&lt;p>The object to be substituted for the placement.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vDVpFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5ucfpFcEeK-TsyQVDVbrQ" association="_w5vDVJFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDV5FcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDWJFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vDWZFcEeK-TsyQVDVbrQ" name="A_LinkEndSubstitution_ObjectHandle" memberEnd="_w5udCZFcEeK-TsyQVDVbrQ _w5vDW5FcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDWpFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDWZFcEeK-TsyQVDVbrQ">
          <body>&lt;p>The Object to be substituted for the current object as the link-end.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vDW5FcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5udAJFcEeK-TsyQVDVbrQ" association="_w5vDWZFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDXJFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDXZFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vDXpFcEeK-TsyQVDVbrQ" name="BoundaryElementBinding" isAbstract="true">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDX5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vDXpFcEeK-TsyQVDVbrQ">
          <body>Specifies the binding between the boundary elements of the placement fragment and the replacement fragment.</body>
        </ownedComment>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vDYJFcEeK-TsyQVDVbrQ" name="A_FragmentSubstitution_BoundaryElementBinding" memberEnd="_w5uccJFcEeK-TsyQVDVbrQ _w5vDYZFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vDYZFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5ucbJFcEeK-TsyQVDVbrQ" association="_w5vDYJFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDYpFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDY5FcEeK-TsyQVDVbrQ" value="1"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vDZJFcEeK-TsyQVDVbrQ" name="ToBinding">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDZZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDZJFcEeK-TsyQVDVbrQ">
          <body>&lt;p>ToBinding defines a binding between boundary elements of kind ToPlacement/ToReplacement. The ToPlacement boundary element&lt;br>has to be bound to the ToReplacement.&lt;/p>&lt;p>&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>Invariant&lt;/p>&lt;p>Invariant : The ToPlacement boundary element must be bound to the ToReplacement element&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- The ToPlacement boundary element must be bound to the ToReplacement element&lt;/p>&lt;p>context ToBinding :&lt;/p>&lt;p>inv mustBeBoundToTheToReplacement :&lt;/p>&lt;p>self.toPlacement.toReplacement = self.toReplacement&lt;/p>&lt;p>Dynamic semantics&lt;/p>&lt;p>Pre and post condition&lt;/p>&lt;p>Pre-condition : &lt;/p>&lt;p>None&lt;/p>&lt;p>Post-condition: &lt;/p>&lt;p>After a FragmentSubstitution has been executed (and as a consequence a ToBinding), the elements that referenced before the placement inside model elements reference now the replacement inside model elements.&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- ToBinding&lt;/p>&lt;p>-- (FragmentSubstitution : the placement and replacement boundary elements are connected by bindings)&lt;/p>&lt;p>-- toPlacement.outsideBoundaryElement.propertyName[] = toReplacement.insideBoundaryElement[]&lt;/p>&lt;p>context ToBinding::eval(ctx : CVLExecutionContext)&lt;/p>&lt;p>pre :&lt;/p>&lt;p>post : self.toPlacement.outsideBoundaryElement.getPropertyValue(self.toPlacement.propertyName)-&amp;gt;forAll( val | val.oclIsTypeOf(ObjectHandle) and  self.toReplacement.insideBoundaryElement-&amp;gt;includes(val.oclAsType(ObjectHandle)))&lt;/p>&lt;p>&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vDZpFcEeK-TsyQVDVbrQ" general="_w5vDXpFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vDZ5FcEeK-TsyQVDVbrQ" name="toPlacement" visibility="private" type="_w5vDh5FcEeK-TsyQVDVbrQ" association="_w5vDo5FcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDaJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDZ5FcEeK-TsyQVDVbrQ">
            <body>Specifies the ToPlacement boundary element that is part of the binding.</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDaZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDapFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vDa5FcEeK-TsyQVDVbrQ" name="toReplacement" visibility="private" type="_w5vDsZFcEeK-TsyQVDVbrQ" association="_w5vDzZFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDbJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDa5FcEeK-TsyQVDVbrQ">
            <body>Specifies the ToReplacement boundary element that is part of the binding.</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDbZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDbpFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vDb5FcEeK-TsyQVDVbrQ" name="FromBinding">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDcJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDb5FcEeK-TsyQVDVbrQ">
          <body>&lt;p>FromBinding defines a binding between boundary elements of kind FromPlacement/FromReplacement. The FromPlacement boundary&lt;br>element that has to be bound to the FromPlacement.&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>Invariant&lt;/p>&lt;p>Invariant : The FromPlacement boundary element must be bound to the FromReplacement element.&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>&lt;/p>&lt;p>-- The FromPlacement boundary element must be bound to the FromReplacement element&lt;/p>&lt;p>context FromBinding :&lt;/p>&lt;p>inv mustBeBoundToTheReplacement :&lt;/p>&lt;p>self.fromPlacement.fromReplacement = self.fromReplacement&lt;/p>&lt;p>Dynamic semantics&lt;/p>&lt;p>Pre and post condition&lt;/p>&lt;p>Pre-condition : &lt;/p>&lt;p>None&lt;/p>&lt;p>Post-condition: &lt;/p>&lt;p>After a FragmentSubstitution has been executed (and as a consequence a FromBinding), the elements inside the replacement element references the element outside the placement elements. These outside elements referenced before the placement elements.&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- FromBinding&lt;/p>&lt;p>-- (FragmentSubstitution : the placement and replacement boundary elements are connected by bindings)&lt;/p>&lt;p>-- fromReplacement.insideBoundaryElement.propertyName[] = fromPlacement.outsideBoundaryElement[]&lt;/p>&lt;p>context FromBinding::eval(ctx : CVLExecutionContext)&lt;/p>&lt;p>pre :&lt;/p>&lt;p>post : self.fromReplacement.insideBoundaryElement.getPropertyValue(self.fromReplacement.propertyName)-&amp;gt;forAll( val | val.oclIsTypeOf(ObjectHandle) and  self.fromPlacement.outsideBoundaryElement-&amp;gt;includes(val.oclAsType(ObjectHandle)))&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vDcZFcEeK-TsyQVDVbrQ" general="_w5vDXpFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vDcpFcEeK-TsyQVDVbrQ" name="fromPlacement" visibility="private" type="_w5vDmJFcEeK-TsyQVDVbrQ" association="_w5vDp5FcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDc5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vDcpFcEeK-TsyQVDVbrQ">
            <body>Specifies the FromPlacement boundary element that is part of the binding.</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDdJFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDdZFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vDdpFcEeK-TsyQVDVbrQ" name="fromReplacement" visibility="private" type="_w5vDvJFcEeK-TsyQVDVbrQ" association="_w5vD0ZFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDd5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vDdpFcEeK-TsyQVDVbrQ">
            <body>Specifies the FromReplacement boundary element that is part of the binding.</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDeJFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDeZFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vDepFcEeK-TsyQVDVbrQ" name="PlacementFragment">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDe5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vDepFcEeK-TsyQVDVbrQ">
          <body>A PlacementFragment defines a fragment (set of model elements) of the base model that will be replaced by a&#xD;
ReplacementFragment during the variability transformation. The set of model elements of the fragment will be deleted.</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vDfJFcEeK-TsyQVDVbrQ" general="_w5ucZZFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vDfZFcEeK-TsyQVDVbrQ" name="placementBoundaryElement" visibility="private" type="_w5vDgZFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vDg5FcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDfpFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDfZFcEeK-TsyQVDVbrQ">
            <body>The boundary elements captures all the relations from and to the fragment.</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDf5FcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDgJFcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vDgZFcEeK-TsyQVDVbrQ" name="PlacementBoundaryElement" isAbstract="true">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDgpFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDgZFcEeK-TsyQVDVbrQ">
          <body>Represents the boundary between a placement fragment and the rest of the base model.</body>
        </ownedComment>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vDg5FcEeK-TsyQVDVbrQ" name="A_PlacementFragment_PlacementBoundaryElement" memberEnd="_w5vDfZFcEeK-TsyQVDVbrQ _w5vDhJFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vDhJFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vDepFcEeK-TsyQVDVbrQ" association="_w5vDg5FcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDhZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDhpFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vDh5FcEeK-TsyQVDVbrQ" name="ToPlacement">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDiJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDh5FcEeK-TsyQVDVbrQ">
          <body>&lt;p>ToPlacement is the kind of boundary element that defines the boundary between the owning placement fragment and the rest of the base model. The insideBoundaryElements denote the ModelElements of owning fragment that are referred to by outside model elements. The outsideBoundaryElement together with the propertyName denotes the attributes of model elements on the outside of the placement fragment that refer to the inside boundary model elements.&lt;/p>&lt;p>Constraints:&lt;/p>&lt;p>insideBoundaryElement = outsideRef.insideBoundaryElement outsideBoundaryElement != null xor outsideRef != null&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>Invariant :&lt;/p>&lt;p > Constraint : &lt;/p>&lt;p >1) self.outsideBoudaryElement &amp;lt;&amp;gt; null xor outsideRef != null&lt;/p>&lt;p >2) All outsideBoundaryElement point on insideBoundaryElement&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- ToPlacement&lt;/p>&lt;p>-- The outsideBoundaryElement together with the propertyName denotes the attributes of model elements outside of the placement fragment that refer to the inside boundary model elements&lt;/p>&lt;p>-- Constraint : &lt;/p>&lt;p>-- 1) self.outsideBoudaryElement &amp;lt;&amp;gt; null xor outsideRef != null&lt;/p>&lt;p>--  2) All outsideBoundaryElement point on insideBoundaryElement&lt;/p>&lt;p>context ToPlacement :&lt;/p>&lt;p> inv insideBoundaryElements_outsideRef :&lt;/p>&lt;p>                -- 1) self.outsideBoudaryElement &amp;lt;&amp;gt; null&lt;/p>&lt;p>                (not self.outsideBoundaryElement-&amp;gt;isEmpty()&lt;/p>&lt;p>        xor self.outsideBoundaryElement.getPropertyValue(self.propertyName) &amp;lt;&amp;gt; null)&lt;/p>&lt;p>        and&lt;/p>&lt;p>                --  2) All outsideBoundaryElement point on insideBoundaryElement&lt;/p>&lt;p>                self.outsideBoundaryElement.getPropertyValue(self.propertyName)-&amp;gt;forAll( val | self.insideBoundaryElement-&amp;gt;includes(val.oclAsType(ObjectHandle) ))&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vDiZFcEeK-TsyQVDVbrQ" general="_w5vDgZFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vDipFcEeK-TsyQVDVbrQ" name="toReplacement" visibility="private" type="_w5vDsZFcEeK-TsyQVDVbrQ" association="_w5vD1ZFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDi5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vDipFcEeK-TsyQVDVbrQ">
            <body>Reference to a ToReplacement in a containing replacement fragment.</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDjJFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDjZFcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vDjpFcEeK-TsyQVDVbrQ" name="propertyName" visibility="private">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDj5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vDjpFcEeK-TsyQVDVbrQ">
            <body>Name of the attribute to be changed.</body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://schema.omg.org/spec/UML/2.2/uml.xml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vDkJFcEeK-TsyQVDVbrQ" name="insideBoundaryElement" visibility="private" type="_w5vDGpFcEeK-TsyQVDVbrQ" association="_w5vD35FcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDkZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDkJFcEeK-TsyQVDVbrQ">
            <body>Model elements that are referred to by outside model elements. Used to distinguish miltiplicity references.</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDkpFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDk5FcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vDlJFcEeK-TsyQVDVbrQ" name="outsideBoundaryElement" visibility="private" type="_w5vDGpFcEeK-TsyQVDVbrQ" association="_w5vD45FcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDlZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDlJFcEeK-TsyQVDVbrQ">
            <body>Outside model elements that refer model elements inside the fragment.</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDlpFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDl5FcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vDmJFcEeK-TsyQVDVbrQ" name="FromPlacement">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDmZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDmJFcEeK-TsyQVDVbrQ">
          <body>FromPlacement is the kind of boundary element that defines the outwards boundary of the owning placement fragment. The&#xD;
outsideBoundaryElement refers to the model elements on the outside of the placement fragment. In a fragment substitution&#xD;
these have to be referred by model elements within the replacement fragment.</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vDmpFcEeK-TsyQVDVbrQ" general="_w5vDgZFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vDm5FcEeK-TsyQVDVbrQ" name="fromReplacement" visibility="private" type="_w5vDvJFcEeK-TsyQVDVbrQ" association="_w5vD1pFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDnJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDm5FcEeK-TsyQVDVbrQ">
            <body>Reference to a FromReplacement in a containing replacement fragment.</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDnZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDnpFcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vDn5FcEeK-TsyQVDVbrQ" name="outsideBoundaryElement" visibility="private" type="_w5vDGpFcEeK-TsyQVDVbrQ" association="_w5vD75FcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDoJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDn5FcEeK-TsyQVDVbrQ">
            <body>Outside Model Element that are referred by the model elements inside the placement fragment.</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDoZFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDopFcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vDo5FcEeK-TsyQVDVbrQ" name="A_ToBinding_ToPlacement" memberEnd="_w5vDZ5FcEeK-TsyQVDVbrQ _w5vDpJFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vDpJFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vDZJFcEeK-TsyQVDVbrQ" association="_w5vDo5FcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDpZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDppFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vDp5FcEeK-TsyQVDVbrQ" name="A_FromBinding_FromPlacement" memberEnd="_w5vDcpFcEeK-TsyQVDVbrQ _w5vDqJFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vDqJFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vDb5FcEeK-TsyQVDVbrQ" association="_w5vDp5FcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDqZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDqpFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vDq5FcEeK-TsyQVDVbrQ" name="ReplacementBoundaryElement" isAbstract="true">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDrJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDq5FcEeK-TsyQVDVbrQ">
          <body>Represents the boundary between a replacement fragment and the rest of the base model.</body>
        </ownedComment>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vDrZFcEeK-TsyQVDVbrQ" name="A_ReplacementFragmentType_ReplacementBoundaryElement" memberEnd="_w5ucz5FcEeK-TsyQVDVbrQ _w5vDrpFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vDrpFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5uczJFcEeK-TsyQVDVbrQ" association="_w5vDrZFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDr5FcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDsJFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vDsZFcEeK-TsyQVDVbrQ" name="ToReplacement">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDspFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDsZFcEeK-TsyQVDVbrQ">
          <body>&lt;p>&#xD;
    ToReplacement is the kind of boundary element that defines the inwards boundary of the owning replacement fragment. The&#xD;
    insideBoundaryElement defines the starting points for the traversal to isolate the model elements that as part of a&#xD;
    fragment substitution will be copied into the placement fragment.&#xD;
&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vDs5FcEeK-TsyQVDVbrQ" general="_w5vDq5FcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vDtJFcEeK-TsyQVDVbrQ" name="toPlacement" visibility="private" type="_w5vDh5FcEeK-TsyQVDVbrQ" association="_w5vD1ZFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDtZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDtJFcEeK-TsyQVDVbrQ">
            <body>Reference to a ToPlacement contained by the replacement fragment.</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDtpFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDt5FcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vDuJFcEeK-TsyQVDVbrQ" name="insideBoundaryElement" visibility="private" type="_w5vDGpFcEeK-TsyQVDVbrQ" association="_w5vD85FcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDuZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDuJFcEeK-TsyQVDVbrQ">
            <body>Model elements that are referred to by outside model elements.</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDupFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDu5FcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vDvJFcEeK-TsyQVDVbrQ" name="FromReplacement">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDvZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDvJFcEeK-TsyQVDVbrQ">
          <body>FromReplacement is the kind of boundary element that defines the outwards boundary of the owning replacement fragment.&#xD;
propertyName is the name of the reference attribute of inside boundary model element that will be changed as part of a&#xD;
fragment substitution. The insideBoundaryElements refer to the base model elements that will have their reference&#xD;
attributes updated as part of a fragment substitution. The outsideBoundaryElement refers to the model elements on the&#xD;
outside of the replacement fragment. In a fragment substitution these references are used to define the extent of the&#xD;
replacement fragment.</body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vDvpFcEeK-TsyQVDVbrQ" general="_w5vDq5FcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vDv5FcEeK-TsyQVDVbrQ" name="fromPlacement" visibility="private" type="_w5vDmJFcEeK-TsyQVDVbrQ" association="_w5vD1pFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDwJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDv5FcEeK-TsyQVDVbrQ">
            <body>Reference to a FromPlacement contained by the replacement fragment.</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDwZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDwpFcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vDw5FcEeK-TsyQVDVbrQ" name="propertyName" visibility="private">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDxJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDw5FcEeK-TsyQVDVbrQ">
            <body>Name of the attribute to be changed.</body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://schema.omg.org/spec/UML/2.2/uml.xml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vDxZFcEeK-TsyQVDVbrQ" name="insideBoundaryElement" visibility="private" type="_w5vDGpFcEeK-TsyQVDVbrQ" association="_w5vD55FcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDxpFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDxZFcEeK-TsyQVDVbrQ">
            <body>Inside model elements that refer outside model elements.</body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDx5FcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDyJFcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vDyZFcEeK-TsyQVDVbrQ" name="outsideBoundaryElement" visibility="private" type="_w5vDGpFcEeK-TsyQVDVbrQ" association="_w5vD65FcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vDypFcEeK-TsyQVDVbrQ" annotatedElement="_w5vDyZFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Outside model elements that are referred by model elements inside the fragment. Used to distinguish multiplicity references.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDy5FcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vDzJFcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vDzZFcEeK-TsyQVDVbrQ" name="A_ToBinding_ToReplacement" memberEnd="_w5vDa5FcEeK-TsyQVDVbrQ _w5vDzpFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vDzpFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vDZJFcEeK-TsyQVDVbrQ" association="_w5vDzZFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vDz5FcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vD0JFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vD0ZFcEeK-TsyQVDVbrQ" name="A_FromBinding_FromReplacement" memberEnd="_w5vDdpFcEeK-TsyQVDVbrQ _w5vD0pFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vD0pFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vDb5FcEeK-TsyQVDVbrQ" association="_w5vD0ZFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vD05FcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vD1JFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vD1ZFcEeK-TsyQVDVbrQ" name="A_ToPlacement_ToReplacement" memberEnd="_w5vDipFcEeK-TsyQVDVbrQ _w5vDtJFcEeK-TsyQVDVbrQ"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vD1pFcEeK-TsyQVDVbrQ" name="A_FromPlacement_FromReplacement" memberEnd="_w5vDm5FcEeK-TsyQVDVbrQ _w5vDv5FcEeK-TsyQVDVbrQ"/>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vD15FcEeK-TsyQVDVbrQ" name="A_FragmentSubstitution_PlacementFragment" memberEnd="_w5ucdJFcEeK-TsyQVDVbrQ _w5vD2JFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vD2JFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5ucbJFcEeK-TsyQVDVbrQ" association="_w5vD15FcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vD2ZFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vD2pFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vD25FcEeK-TsyQVDVbrQ" name="A_ReplacementFragmentType_PlacementFragment" memberEnd="_w5uc05FcEeK-TsyQVDVbrQ _w5vD3JFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vD3JFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5uczJFcEeK-TsyQVDVbrQ" association="_w5vD25FcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vD3ZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vD3pFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vD35FcEeK-TsyQVDVbrQ" name="A_ToPlacement_ObjectHandle_inside" memberEnd="_w5vDkJFcEeK-TsyQVDVbrQ _w5vD4JFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vD4JFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vDh5FcEeK-TsyQVDVbrQ" association="_w5vD35FcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vD4ZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vD4pFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vD45FcEeK-TsyQVDVbrQ" name="A_ToPlacement_ObjectHandle_outside" memberEnd="_w5vDlJFcEeK-TsyQVDVbrQ _w5vD5JFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vD5JFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vDh5FcEeK-TsyQVDVbrQ" association="_w5vD45FcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vD5ZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vD5pFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vD55FcEeK-TsyQVDVbrQ" name="A_FromReplacement_ObjectHandle_inside" memberEnd="_w5vDxZFcEeK-TsyQVDVbrQ _w5vD6JFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vD6JFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vDvJFcEeK-TsyQVDVbrQ" association="_w5vD55FcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vD6ZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vD6pFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vD65FcEeK-TsyQVDVbrQ" name="A_FromReplacement_ObjectHandle_outside" memberEnd="_w5vDyZFcEeK-TsyQVDVbrQ _w5vD7JFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vD7JFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vDvJFcEeK-TsyQVDVbrQ" association="_w5vD65FcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vD7ZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vD7pFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vD75FcEeK-TsyQVDVbrQ" name="A_FromPlacement_ObjectHandle" memberEnd="_w5vDn5FcEeK-TsyQVDVbrQ _w5vD8JFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vD8JFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vDmJFcEeK-TsyQVDVbrQ" association="_w5vD75FcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vD8ZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vD8pFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vD85FcEeK-TsyQVDVbrQ" name="A_ToReplacement_ObjectHandle" memberEnd="_w5vDuJFcEeK-TsyQVDVbrQ _w5vD9JFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vD9JFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vDsZFcEeK-TsyQVDVbrQ" association="_w5vD85FcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vD9ZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vD9pFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vD95FcEeK-TsyQVDVbrQ" name="A_Variable_ReplacementFragmentType" memberEnd="_w5ucnJFcEeK-TsyQVDVbrQ _w5vD-JFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vD-JFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5ucmZFcEeK-TsyQVDVbrQ" association="_w5vD95FcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vD-ZFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vD-pFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vD-5FcEeK-TsyQVDVbrQ" name="VSpecRef">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vD_JFcEeK-TsyQVDVbrQ" annotatedElement="_w5vD-5FcEeK-TsyQVDVbrQ">
          <body>&lt;p>A constraint expression that references a VSpec. It must reference an existing VSpec.&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vD_ZFcEeK-TsyQVDVbrQ" general="_w5vqHJFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vD_pFcEeK-TsyQVDVbrQ" name="vSpec" visibility="private" type="_w5ucLpFcEeK-TsyQVDVbrQ" association="_w5vqupFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vD_5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vD_pFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Reference to the VSpec.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vEAJFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vEAZFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vEApFcEeK-TsyQVDVbrQ" name="OpaqueConstraint">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vEA5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vEApFcEeK-TsyQVDVbrQ">
          <body>&lt;p>A Constraint imposes additional restrictions that cannot be expressed in the base language. Each constraint has associated a VSpec context. It allows expressing universal quantification without explicit quantification phrases such as ''for all elements belonging to...'. Constraints written in a context are applied to each named VSpec that is available in this context.&lt;/p>&lt;p>The full constraint language (with classifiers) has set semantics for all non-propositional expressions (VSpecs, Integers, etc.). The small language (without classifiers) relies mostly on propositional formulas. A Constraint contains GeneralExpressions, which are always expected to evaluate to a boolean value. In case of set semantics GeneralExpressions are always LogicalExps, while in the small language they are LogicalExps or VSpecReferences. In the small language VSpecReferences have propositional semantics and are treated as Boolean choices.&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>&lt;b>&lt;/b>Invariant :&lt;b>&lt;/b> Each constraint must have a VSpec context&lt;/p>&lt;p>&lt;b>&lt;/b>OCL :&lt;b>&lt;/b>&lt;/p>&lt;p>-- Constraint&lt;/p>&lt;p>-- Each Constraint must have a VSpec context&lt;/p>&lt;p>context Constraint :&lt;/p>&lt;p>inv hasAVSpecContext :&lt;/p>&lt;p>not (self._context == (null))&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p>&lt;p>&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vEBJFcEeK-TsyQVDVbrQ" general="_w5vqm5FcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vEBZFcEeK-TsyQVDVbrQ" name="constraint" visibility="private">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vEBpFcEeK-TsyQVDVbrQ" annotatedElement="_w5vEBZFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Constraint as an opaque String.&lt;/p></body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://schema.omg.org/spec/UML/2.2/uml.xml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vEB5FcEeK-TsyQVDVbrQ" name="constraintLanguage" visibility="private">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vECJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vEB5FcEeK-TsyQVDVbrQ">
            <body>&lt;p>Language of the OpaqueConstraint as a String.&lt;/p></body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://schema.omg.org/spec/UML/2.2/uml.xml#String"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vECZFcEeK-TsyQVDVbrQ" name="VSpecDerivation">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vECpFcEeK-TsyQVDVbrQ" annotatedElement="_w5vECZFcEeK-TsyQVDVbrQ">
          <body>&lt;p>A VSpec derivation is a specification how to derive the resolution for a particular VSpec from resolutions for other VSpecs. When a VSpec derivation is specified for a VSpec the resolution model need not specify a resolution for it as it is calculated according to the VSpec derivation.&lt;/p>&lt;p>&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vEC5FcEeK-TsyQVDVbrQ" general="_w5vDL5FcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vEDJFcEeK-TsyQVDVbrQ" name="derivedVSpec" visibility="private" type="_w5ucLpFcEeK-TsyQVDVbrQ" association="_w5vqOZFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vEDZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vEDJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The VSpec whose value is derived by this derivation.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vEDpFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vED5FcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vEEJFcEeK-TsyQVDVbrQ" name="A_ConfigurableUnit_Constraint" memberEnd="_w5udGJFcEeK-TsyQVDVbrQ _w5vEEZFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vEEZFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5udDZFcEeK-TsyQVDVbrQ" association="_w5vEEJFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vEEpFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vEE5FcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vEFJFcEeK-TsyQVDVbrQ" name="A_VInterface_Constraint" memberEnd="_w5uc3pFcEeK-TsyQVDVbrQ _w5vEFZFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vEFZFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5uc15FcEeK-TsyQVDVbrQ" association="_w5vEFJFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vEFpFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vEF5FcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vEGJFcEeK-TsyQVDVbrQ" name="A_ConfigurableUnit_ObjectHandle" memberEnd="_w5udHJFcEeK-TsyQVDVbrQ _w5vEGZFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vEGZFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5udDZFcEeK-TsyQVDVbrQ" association="_w5vEGJFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vEGpFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vEG5FcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vEHJFcEeK-TsyQVDVbrQ" name="A_Variable_ValueSpecification" memberEnd="_w5ucoJFcEeK-TsyQVDVbrQ _w5vEHZFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vEHZFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5ucmZFcEeK-TsyQVDVbrQ" association="_w5vEHJFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vEHpFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vEH5FcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vEIJFcEeK-TsyQVDVbrQ" name="A_CompositeVariationPoint_CVSpec" memberEnd="_w5vqeZFcEeK-TsyQVDVbrQ _w5vEIpFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vEIZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vEIJFcEeK-TsyQVDVbrQ">
          <body>&lt;p>The CVSpec to which the composite variation point is bound.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vEIpFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vqdpFcEeK-TsyQVDVbrQ" association="_w5vEIJFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vEI5FcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vEJJFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vEJZFcEeK-TsyQVDVbrQ" name="ChoiceVariationPoint" isAbstract="true">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vEJpFcEeK-TsyQVDVbrQ" annotatedElement="_w5vEJZFcEeK-TsyQVDVbrQ">
          <body>&lt;p>A choice variation point is a variation point which may be bound to a&lt;span style=&quot;font-size:8pt;&quot;> choice. During materialization the decision resolving the choice determines whether or not the variation point will be applied or not.&lt;/span>&lt;/p>&lt;p>&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vEJ5FcEeK-TsyQVDVbrQ" general="_w5ucZZFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vEKJFcEeK-TsyQVDVbrQ" name="bindingChoice" visibility="private" type="_w5ucHpFcEeK-TsyQVDVbrQ" association="_w5vqDpFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vEKZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vEKJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The binding choice.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vEKpFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vEK5FcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vELJFcEeK-TsyQVDVbrQ" name="ParametricVariationPoint" isAbstract="true">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vELZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vELJFcEeK-TsyQVDVbrQ">
          <body>&lt;p>&lt;span>&lt;span style=&quot;font-size:8pt;&quot;>A parametric variation point is a variation point that depends on a parameter and must be bound to a variable. During materialization the value supplied as the resolution for the variable is used for the parameter. &lt;/span>&lt;/span>&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vELpFcEeK-TsyQVDVbrQ" general="_w5ucZZFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vEL5FcEeK-TsyQVDVbrQ" name="bindingVariable" visibility="private" type="_w5ucmZFcEeK-TsyQVDVbrQ" association="_w5vqE5FcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vEMJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vEL5FcEeK-TsyQVDVbrQ">
            <body>&lt;p>The binding variable.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vEMZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vEMpFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vEM5FcEeK-TsyQVDVbrQ" name="RepeatableVariationPoint" isAbstract="true">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vENJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vEM5FcEeK-TsyQVDVbrQ">
          <body>&lt;p>&lt;span>&lt;span style=&quot;font-size:8pt;&quot;>A repeatable variation point is a variation point that may be applied several times during materialization. It may be bound to a VClassifier and is applied once for each instance of it. &lt;/span>&lt;/span>&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vENZFcEeK-TsyQVDVbrQ" general="_w5ucZZFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vENpFcEeK-TsyQVDVbrQ" name="bindingClassifier" visibility="private" type="_w5ucJ5FcEeK-TsyQVDVbrQ" association="_w5vqCZFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vp0JFcEeK-TsyQVDVbrQ" annotatedElement="_w5vENpFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The binding classifier.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vp0ZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vp0pFcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vp05FcEeK-TsyQVDVbrQ" name="SlotValueExistence">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vp1JFcEeK-TsyQVDVbrQ" annotatedElement="_w5vp05FcEeK-TsyQVDVbrQ">
          <body>&lt;p>SlotValueExistence is a choice variation point which indicates that a value in a slot of some object of the base model may or may not exist in the materialized model. The object is identified via an object handle and the the slot is identified via its name, as indicated in the attribute slotIdentifie.&lt;/p>&lt;p>When this variation point is applied, the slot in the base model is cleared from whatever value it has.&lt;br>&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>&lt;/p>&lt;p>Dynamic semantics&lt;/p>&lt;p>Pre and post condition&lt;/p>&lt;p>Pre-condition :&lt;/p>&lt;p>Before the execution of a SlotValueExistence, the slotOwner element must exist in the base model.&lt;/p>&lt;p>Post-condition:&lt;/p>&lt;blockquote>&lt;p>After a SlotValueExsitence has been executed, the MoF property with the name such as in the slotIdentifier is in the ObjectHandle otherwise it cannot be found in the ObjectHandle.&lt;/p>&lt;/blockquote>&lt;p>OCL :&lt;/p>&lt;p>-- SlotValueExistence&lt;/p>&lt;p>context SlotValueExistence::eval(ctx : CVLExecutionContext)&lt;/p>&lt;p>pre : ctx.resolvedModelElements->includes(self.slotOwner)&lt;/p>&lt;p>post :&lt;/p>&lt;p>ctx.selectedVSpecs->includes(self.bindingVspec->asOrderedSet()->first()) implies self.slotOwner->asOrderedSet()->first().getPropertyByName(self.slotIdentifier)&lt;/p>&lt;p>null&lt;/p>&lt;p>and&lt;/p>&lt;p>ctx.unselectedVSpecs->includes(self.bindingVspec->asOrderedSet()->first()) implies (self.slotOwner->asOrderedSet()->first().getPropertyByName(self.slotIdentifier)) == (null)&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vp1ZFcEeK-TsyQVDVbrQ" general="_w5vEJZFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vp1pFcEeK-TsyQVDVbrQ" name="slotIdentifier" visibility="private">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vp15FcEeK-TsyQVDVbrQ" annotatedElement="_w5vp1pFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The name of the slot identifier.&lt;/p></body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://schema.omg.org/spec/UML/2.2/uml.xml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vp2JFcEeK-TsyQVDVbrQ" name="slotOwner" visibility="private" type="_w5vDGpFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vp9ZFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vp2ZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vp2JFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Reference to the slot owner.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vp2pFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vp25FcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vp3JFcEeK-TsyQVDVbrQ" name="ParametricLinkEndSubstitution">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vp3ZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vp3JFcEeK-TsyQVDVbrQ">
          <body>&lt;p>A ParametricLinkEndSubstitution is a parametric variation point which specifies that an object arriving as parameter, called the replacement, will be substituted for an object of the base model as the end of a particular link in the base model. The link-end is identified via a link handle pointing to the base model plus a string representing a MOF property owned by the association of which the link is an instance. The variation point must be bound to a variable which will provide the replacement object coming as parameter.&lt;br>&lt;br>When this variation point is applied,the link-end is redirected to the replacement coming as parameter.&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>&lt;/p>&lt;p>Dynamic semantics&lt;/p>&lt;p>Pre and post condition&lt;/p>&lt;p>Pre-condition :&lt;/p>&lt;p>Before the execution of a ParametricLinkAssignment, the link link must exist in the base model and a end corresponding to the given linkEndIdentifier exists in the ObjectHandle.&lt;/p>&lt;p>Post-condition:&lt;/p>&lt;p>After a ParametricLinkAssignment has been executed, the object which arrives in the variable is at the end of the link link.&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- ParametricLinkAssignment&lt;/p>&lt;p>-- A end corresponding to the given linkEndIdentifier exists in the ObjectHandle&lt;/p>&lt;p>context ParametricLinkAssignment::eval(ctx : CVLExecutionContext)&lt;/p>&lt;p>pre : ctx.baseLinks->includes(self.link)&lt;/p>&lt;p>and if self.getPropertyValue(self.linkEndIdentifier)&lt;/p>&lt;p>null&lt;/p>&lt;p>then&lt;/p>&lt;p>self.getPropertyValue(self.linkEndIdentifier)->forAll( val | ctx.resolvedModelElements->includes(val.oclAsType(ObjectHandle)))&lt;/p>&lt;p>else&lt;/p>&lt;p>false&lt;/p>&lt;p>endif&lt;/p>&lt;p>post: self.link.getEnd()->includes(&lt;/p>&lt;p>VariableValueAssignment.allInstances()->select (varValueAssign | (self.bindingVspec&lt;/p>&lt;p>->includes(varValueAssign.resolvedVariable)))->asOrderedSet()->first().value )&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vp3pFcEeK-TsyQVDVbrQ" general="_w5vELJFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vp35FcEeK-TsyQVDVbrQ" name="linkEndIdentifier" visibility="private">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vp4JFcEeK-TsyQVDVbrQ" annotatedElement="_w5vp35FcEeK-TsyQVDVbrQ">
            <body>&lt;p>Name of the link end.&lt;/p></body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://schema.omg.org/spec/UML/2.2/uml.xml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vp4ZFcEeK-TsyQVDVbrQ" name="link" visibility="private" type="_w5vDI5FcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vqBJFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vp4pFcEeK-TsyQVDVbrQ" annotatedElement="_w5vp4ZFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Reference to the link end.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vp45FcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vp5JFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vp5ZFcEeK-TsyQVDVbrQ" name="ParametricObjectSubstitution">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vp5pFcEeK-TsyQVDVbrQ" annotatedElement="_w5vp5ZFcEeK-TsyQVDVbrQ">
          <body>&lt;p>A ParametricObjectSubstitution is a parametric variation point which specifies that an object arriving as parameter, called the replacement, will be substituted for an object of the base model, called the placement. The placement object is identified via an object handle identifying a base model object. The variation point must be bound to a variable which will provide the replacement coming as parameter.&lt;/p>&lt;p>When this variation point is applied, all links touching the placement are redirected to the replacement and the placement is deleted.&lt;br>&lt;br>&lt;br>An ObjectSubstitution may not be bound to a choice or VClassifier.&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>Dynamic semantics&lt;/p>&lt;p>Pre and post condition&lt;/p>&lt;p>Pre-condition :&lt;/p>&lt;p>Before the execution of a ParametricObjectSubstitution, the placement object must exist in the base model and the replacement object is in the variable.&lt;/p>&lt;p>Post-condition:&lt;/p>&lt;p>After a ParametricObjectSubstution has been executed, the replacement object must exist in the resolved model whereas the placement object cannot be found in the resolved model.&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- ParametricObjectSubstitution&lt;/p>&lt;p>context ParametricObjectSubstitution::eval(ctx : CVLExecutionContext)&lt;/p>&lt;p>pre:&lt;/p>&lt;p>ctx.resolvedModelElements->includes( self.placementObject)&lt;/p>&lt;p>and (VariableValueAssignment.allInstances()->select (varValueAssign | (self.bindingVspec&lt;/p>&lt;p>->includes(varValueAssign.resolvedVariable)))->asOrderedSet()->first().value)&lt;/p>&lt;p>null&lt;/p>&lt;p>post:&lt;/p>&lt;p>ctx.resolvedModelElements->includes( (VariableValueAssignment.allInstances()->select (varValueAssign | (self.bindingVspec&lt;/p>&lt;p>->includes(varValueAssign.resolvedVariable)))->asOrderedSet()->first().value).oclAsType(ObjectSpecification).object)&lt;/p>&lt;p>and not ctx.resolvedModelElements->includes( self.placementObject)&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vp55FcEeK-TsyQVDVbrQ" general="_w5vELJFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vp6JFcEeK-TsyQVDVbrQ" name="placementObject" visibility="private" type="_w5vDGpFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vp-pFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vp6ZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vp6JFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The placement object.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vp6pFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vp65FcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vp7JFcEeK-TsyQVDVbrQ" name="ParametricSlotAssignmet">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vp7ZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vp7JFcEeK-TsyQVDVbrQ">
          <body>&lt;p>A parametric slot assignment is a parametric variation point which specifies that a value arriving as parameter will be assigned to a particular slot in a particular object in the base model. The object is identified via an object handle pointing to the base model, The object is identified via an object handle, and the the slot is identified via its name, as indicated in the attribute slotIdentifie. The variation point must be bound to a variable which will provide the value coming as parameter.&lt;br>&lt;br>When this variation point is applied, the value coming as parameter is inserted into the base model slot&lt;/p>&lt;p>&lt;/p>&lt;p>####CVLSemanticStart####&lt;/p>&lt;p>Invariant&lt;/p>&lt;p>Invariant : The slotIdentifier must correspond to a property name of the associated ObjectHandle&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- ParametricSlotAssignment&lt;/p>&lt;p>-- The slotIdentifier must correspond to a property name of the associated ObjectHandle&lt;/p>&lt;p>context ParametricSlotAssignmet :&lt;/p>&lt;p>inv slotIdentifierExists :&lt;/p>&lt;p>self.slotOwner.getPropertyByName(self.slotIdentifier)&lt;/p>&lt;p>null&lt;/p>&lt;p>Dynamic semantics&lt;/p>&lt;p>Pre and post condition&lt;/p>&lt;p>Pre-condition :&lt;/p>&lt;p>Before the execution of a ParametricSlotAssignment, the ObjectHandle slotOwner must exist in the base model.&lt;/p>&lt;p>Post-condition:&lt;/p>&lt;p>After a ParametricSlotAssignment has been executed, the slot identified by the slotIdentifier and contained in the ObjectHandle slotOwner is assigned with a given value.&lt;/p>&lt;p>OCL :&lt;/p>&lt;p>-- ParametricSlotAssignment&lt;/p>&lt;p>context ParametricSlotAssignmet::eval(ctx : CVLExecutionContext)&lt;/p>&lt;p>pre : ctx.resolvedModelElements->includes(self.slotOwner)&lt;/p>&lt;p>post: self.slotOwner.getPropertyValue(self.slotIdentifier)->asOrderedSet()->first() == (VariableValueAssignment.allInstances()->select (varValueAssign | (self.bindingVspec&lt;/p>&lt;p>->includes(varValueAssign.resolvedVariable)))->asOrderedSet()->first().value)&lt;/p>&lt;p>####CVLSemanticEnd####&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vp7pFcEeK-TsyQVDVbrQ" general="_w5vELJFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vp75FcEeK-TsyQVDVbrQ" name="slotIdentifier" visibility="private">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vp8JFcEeK-TsyQVDVbrQ" annotatedElement="_w5vp75FcEeK-TsyQVDVbrQ">
            <body>&lt;p>The name of the slot identifier.&lt;/p></body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://schema.omg.org/spec/UML/2.2/uml.xml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vp8ZFcEeK-TsyQVDVbrQ" name="slotOwner" visibility="private" type="_w5vDGpFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vp_5FcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vp8pFcEeK-TsyQVDVbrQ" annotatedElement="_w5vp8ZFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The slot owner.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vp85FcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vp9JFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vp9ZFcEeK-TsyQVDVbrQ" name="A_SlotValueExistence_ObjectHandle" memberEnd="_w5vp2JFcEeK-TsyQVDVbrQ _w5vp95FcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vp9pFcEeK-TsyQVDVbrQ" annotatedElement="_w5vp9ZFcEeK-TsyQVDVbrQ">
          <body>&lt;p>The object owning the slot with the value in question.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vp95FcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vp05FcEeK-TsyQVDVbrQ" association="_w5vp9ZFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vp-JFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vp-ZFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vp-pFcEeK-TsyQVDVbrQ" name="A_ParametricObjectSubstitution_ObjectHandle" memberEnd="_w5vp6JFcEeK-TsyQVDVbrQ _w5vp_JFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vp-5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vp-pFcEeK-TsyQVDVbrQ">
          <body>&lt;p>The object the replacement will be substituted for.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vp_JFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vp5ZFcEeK-TsyQVDVbrQ" association="_w5vp-pFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vp_ZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vp_pFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vp_5FcEeK-TsyQVDVbrQ" name="A_ParametricSlotAssignment_ObjectHandle" memberEnd="_w5vp8ZFcEeK-TsyQVDVbrQ _w5vqAZFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqAJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vp_5FcEeK-TsyQVDVbrQ">
          <body>&lt;p>The base model object whose slot will be assigned a value.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vqAZFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vp7JFcEeK-TsyQVDVbrQ" association="_w5vp_5FcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqApFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqA5FcEeK-TsyQVDVbrQ" value="1"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vqBJFcEeK-TsyQVDVbrQ" name="A_ParametricLinkEndSubstitution_LinkHandle" memberEnd="_w5vp4ZFcEeK-TsyQVDVbrQ _w5vqBpFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqBZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vqBJFcEeK-TsyQVDVbrQ">
          <body>&lt;p>The link whose end is candidate for substitution.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vqBpFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vp3JFcEeK-TsyQVDVbrQ" association="_w5vqBJFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqB5FcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqCJFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vqCZFcEeK-TsyQVDVbrQ" name="A_RepeatableVariationPoint_VClassifier" memberEnd="_w5vENpFcEeK-TsyQVDVbrQ _w5vqC5FcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqCpFcEeK-TsyQVDVbrQ" annotatedElement="_w5vqCZFcEeK-TsyQVDVbrQ">
          <body>&lt;p>The VClassifier to which the repeatable variation point is bound.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vqC5FcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vEM5FcEeK-TsyQVDVbrQ" association="_w5vqCZFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqDJFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqDZFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vqDpFcEeK-TsyQVDVbrQ" name="A_ChoiceVariationPoint:_Choice" memberEnd="_w5vEKJFcEeK-TsyQVDVbrQ _w5vqEJFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqD5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vqDpFcEeK-TsyQVDVbrQ">
          <body>&lt;p>The choice to which the choice variation point is bound.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vqEJFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vEJZFcEeK-TsyQVDVbrQ" association="_w5vqDpFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqEZFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqEpFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vqE5FcEeK-TsyQVDVbrQ" name="A_ParametricVariationPoint_Variable" memberEnd="_w5vEL5FcEeK-TsyQVDVbrQ _w5vqFZFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqFJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vqE5FcEeK-TsyQVDVbrQ">
          <body>&lt;p>The variable to which the parametric variation point is bound.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vqFZFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vELJFcEeK-TsyQVDVbrQ" association="_w5vqE5FcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqFpFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqF5FcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vqGJFcEeK-TsyQVDVbrQ" name="A_FragmentSubstitution_ReplacementFragmentType" memberEnd="_w5ucepFcEeK-TsyQVDVbrQ _w5vqGZFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vqGZFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5ucbJFcEeK-TsyQVDVbrQ" association="_w5vqGJFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqGpFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqG5FcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vqHJFcEeK-TsyQVDVbrQ" name="BCLExpression">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqHZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vqHJFcEeK-TsyQVDVbrQ">
          <body>&lt;p>A generic class for expressions available in the basic constraint language.&lt;/p></body>
        </ownedComment>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vqHpFcEeK-TsyQVDVbrQ" name="A_VConfiguration_CVSpec" memberEnd="_w5vC4ZFcEeK-TsyQVDVbrQ _w5vqIJFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqH5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vqHpFcEeK-TsyQVDVbrQ">
          <body>&lt;p>The CVSpec resolved by this VConfiguration.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vqIJFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vC15FcEeK-TsyQVDVbrQ" association="_w5vqHpFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqIZFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqIpFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vqI5FcEeK-TsyQVDVbrQ" name="CVSpec">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqJJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vqI5FcEeK-TsyQVDVbrQ">
          <body>&lt;p class=&quot;MsoNormal&quot;>&lt;span style=&quot;font-size:8pt;font-family:Tahoma;&quot;>A CVSpec is a VSpec whose resolution requires resolving the VSpecs in its type, which is a VInterface. When a configurable unit is bound to a CVSpec, its resolution determines the transformations to be applied to the internals of the unit during materialization. &lt;/span>&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vqJZFcEeK-TsyQVDVbrQ" general="_w5ucLpFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vqJpFcEeK-TsyQVDVbrQ" name="type" visibility="private" type="_w5uc15FcEeK-TsyQVDVbrQ" association="_w5vqKpFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqJ5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vqJpFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The VInterface  whose members need to be resolved in order to resolve the CVSpec.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqKJFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqKZFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vqKpFcEeK-TsyQVDVbrQ" name="A_CVSpec_VInterface" memberEnd="_w5vqJpFcEeK-TsyQVDVbrQ _w5vqLJFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqK5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vqKpFcEeK-TsyQVDVbrQ">
          <body>&lt;p>The type of the CVSpec.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vqLJFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vqI5FcEeK-TsyQVDVbrQ" association="_w5vqKpFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqLZFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqLpFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vqL5FcEeK-TsyQVDVbrQ" name="Variabletype">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqMJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vqL5FcEeK-TsyQVDVbrQ">
          <body>&lt;p>The type of a variable or a value specification.&lt;/p></body>
        </ownedComment>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vqMZFcEeK-TsyQVDVbrQ" name="A_Variable_Variabletype" memberEnd="_w5ucpJFcEeK-TsyQVDVbrQ _w5vqMpFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vqMpFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5ucmZFcEeK-TsyQVDVbrQ" association="_w5vqMZFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqM5FcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqNJFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vqNZFcEeK-TsyQVDVbrQ" name="A_ValueSpecification_Variabletype" memberEnd="_w5ucupFcEeK-TsyQVDVbrQ _w5vqNpFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vqNpFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5ucuJFcEeK-TsyQVDVbrQ" association="_w5vqNZFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqN5FcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqOJFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vqOZFcEeK-TsyQVDVbrQ" name="A_VSpecDerivation_VSpec" memberEnd="_w5vEDJFcEeK-TsyQVDVbrQ _w5vqO5FcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqOpFcEeK-TsyQVDVbrQ" annotatedElement="_w5vqOZFcEeK-TsyQVDVbrQ">
          <body>&lt;p>The VSpec whose resolution is derived by this VSpec derivation.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vqO5FcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vECZFcEeK-TsyQVDVbrQ" association="_w5vqOZFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqPJFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqPZFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vqPpFcEeK-TsyQVDVbrQ" name="ChoiceDerivation">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqP5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vqPpFcEeK-TsyQVDVbrQ">
          <body>&lt;p>A choice derivation is a specification how to derive the decision for a particular choice from resolutions of other VSpecs using a constraint.&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vqQJFcEeK-TsyQVDVbrQ" general="_w5vECZFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vqQZFcEeK-TsyQVDVbrQ" name="derivingConstraint" visibility="private" type="_w5vqm5FcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vqY5FcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqQpFcEeK-TsyQVDVbrQ" annotatedElement="_w5vqQZFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The deriving constraint.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqQ5FcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqRJFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vqRZFcEeK-TsyQVDVbrQ" name="derivedChoice" visibility="private" type="_w5ucHpFcEeK-TsyQVDVbrQ" association="_w5wQ8JFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqRpFcEeK-TsyQVDVbrQ" annotatedElement="_w5vqRZFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The derived choice of this ChoiceDerivation.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqR5FcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqSJFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vqSZFcEeK-TsyQVDVbrQ" name="VariableDerivation">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqSpFcEeK-TsyQVDVbrQ" annotatedElement="_w5vqSZFcEeK-TsyQVDVbrQ">
          <body>&lt;p>A variable derivation is a specification how to derive the value of a particular variable from an expression over VSpecs.&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vqS5FcEeK-TsyQVDVbrQ" general="_w5vECZFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vqTJFcEeK-TsyQVDVbrQ" name="derivingExpression" visibility="private" type="_w5vqHJFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vqaJFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqTZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vqTJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The expression utilized for derivation.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqTpFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqT5FcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vqUJFcEeK-TsyQVDVbrQ" name="derivedVariable" visibility="private" type="_w5ucmZFcEeK-TsyQVDVbrQ" association="_w5wQ65FcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqUZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vqUJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The variable it is derived from.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqUpFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqU5FcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vqVJFcEeK-TsyQVDVbrQ" name="CVSpecDerivation">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqVZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vqVJFcEeK-TsyQVDVbrQ">
          <body>&lt;p>A CVSpec derivation is a specification how to derive the resolution for a particular CVSpec from the resolution of another CVSpec&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vqVpFcEeK-TsyQVDVbrQ" general="_w5vECZFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vqV5FcEeK-TsyQVDVbrQ" name="memberDerivation" visibility="private" type="_w5vECZFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vqbZFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqWJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vqV5FcEeK-TsyQVDVbrQ">
            <body>&lt;p>The member derivations.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqWZFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqWpFcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vqW5FcEeK-TsyQVDVbrQ" name="derivingCVspec" visibility="private" type="_w5vqI5FcEeK-TsyQVDVbrQ" association="_w5vrUZFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqXJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vqW5FcEeK-TsyQVDVbrQ">
            <body>&lt;p>The deriving CVSpec.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqXZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqXpFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vqX5FcEeK-TsyQVDVbrQ" name="derivedCVSpec" visibility="private" type="_w5vqI5FcEeK-TsyQVDVbrQ" association="_w5wQ5pFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqYJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vqX5FcEeK-TsyQVDVbrQ">
            <body>&lt;p>The derived CVSpec.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqYZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqYpFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vqY5FcEeK-TsyQVDVbrQ" name="A_ChoiceDerivation_Constraint" memberEnd="_w5vqQZFcEeK-TsyQVDVbrQ _w5vqZZFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqZJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vqY5FcEeK-TsyQVDVbrQ">
          <body>&lt;p>The constraint (logical formula) deriving the value of the choice. &lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vqZZFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vqPpFcEeK-TsyQVDVbrQ" association="_w5vqY5FcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqZpFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqZ5FcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vqaJFcEeK-TsyQVDVbrQ" name="A_VariableDerivation_BCLExpression" memberEnd="_w5vqTJFcEeK-TsyQVDVbrQ _w5vqapFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqaZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vqaJFcEeK-TsyQVDVbrQ">
          <body>&lt;p>The expression deriving the value for the variable.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vqapFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vqSZFcEeK-TsyQVDVbrQ" association="_w5vqaJFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqa5FcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqbJFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vqbZFcEeK-TsyQVDVbrQ" name="A_CVSpecDerivation_VSpecDerivation" memberEnd="_w5vqV5FcEeK-TsyQVDVbrQ _w5vqb5FcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqbpFcEeK-TsyQVDVbrQ" annotatedElement="_w5vqbZFcEeK-TsyQVDVbrQ">
          <body>&lt;p>The derivations for the VSpecs in the VInterface which is the type of the derived CVSpec. All these derivations must be from members of the VInterface which the type of the deriving CVSpec.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vqb5FcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vqVJFcEeK-TsyQVDVbrQ" association="_w5vqbZFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqcJFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqcZFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vqcpFcEeK-TsyQVDVbrQ" name="A_VSpec_VSpecDerivation" memberEnd="_w5ucOJFcEeK-TsyQVDVbrQ _w5vqc5FcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vqc5FcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5ucLpFcEeK-TsyQVDVbrQ" association="_w5vqcpFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqdJFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqdZFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vqdpFcEeK-TsyQVDVbrQ" name="CompositeVariationPoint" isAbstract="true">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqd5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vqdpFcEeK-TsyQVDVbrQ">
          <body>&lt;p>A composite variation point is either a configurable unit or a configurable unit usage. It must be bound to a CVSpec.&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vqeJFcEeK-TsyQVDVbrQ" general="_w5ucZZFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vqeZFcEeK-TsyQVDVbrQ" name="bindingCVSpec" visibility="private" type="_w5vqI5FcEeK-TsyQVDVbrQ" association="_w5vEIJFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqepFcEeK-TsyQVDVbrQ" annotatedElement="_w5vqeZFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The binding CVSpec&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqe5FcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqfJFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vqfZFcEeK-TsyQVDVbrQ" name="ConfigurableUnitUsage">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqfpFcEeK-TsyQVDVbrQ" annotatedElement="_w5vqfZFcEeK-TsyQVDVbrQ">
          <body>&lt;p>&lt;span style=&quot;font-size:8pt;&quot;>A configurable unit usage is a variation point which facilitates per-usage configuration of a configurable unit. Each usage variation point references the CU of which it is a usage, and also references a base model link-end touching the base model container referenced by the CU referenced by the usage. &lt;/span>&lt;/p>&lt;p>&lt;span style=&quot;font-size:8pt;&quot;>A usage variation point must be bound to a CSVpec, the resolution of which configures the particular usage. The type of that CVSpec must be the same as the type of the CVSpec to which the configurable unit it uses is bound. During materialization the base model container referenced by the CU (referenced by the usage) is deeply cloned, and the base model link-end identified by the usage is redirected to the clone.&lt;/span>&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vqf5FcEeK-TsyQVDVbrQ" general="_w5vqdpFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vqgJFcEeK-TsyQVDVbrQ" name="usedUnit" visibility="private" type="_w5udDZFcEeK-TsyQVDVbrQ" association="_w5vqjpFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqgZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vqgJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The used unit.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqgpFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqg5FcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vqhJFcEeK-TsyQVDVbrQ" name="usageReference" visibility="private" type="_w5vDI5FcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vqk5FcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqhZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vqhJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Reference to the usage.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqhpFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqh5FcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vqiJFcEeK-TsyQVDVbrQ" name="linkEndIdentifier" visibility="private">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqiZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vqiJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The identifier of the link end.&lt;/p></body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://schema.omg.org/spec/UML/2.2/uml.xml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vqipFcEeK-TsyQVDVbrQ" name="unitUsageInterface" visibility="private" type="_w5uc15FcEeK-TsyQVDVbrQ" isDerived="true" association="_w5vrSZFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqi5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vqipFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The interface of the unit usage. Derived as the extension of the binding CVSpec.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqjJFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqjZFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vqjpFcEeK-TsyQVDVbrQ" name="A_ConfiigurableUnitUsage_ConfigurableUnit" memberEnd="_w5vqgJFcEeK-TsyQVDVbrQ _w5vqkJFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqj5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vqjpFcEeK-TsyQVDVbrQ">
          <body>&lt;p>The configurable unit of which this is a usage.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vqkJFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vqfZFcEeK-TsyQVDVbrQ" association="_w5vqjpFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqkZFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqkpFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vqk5FcEeK-TsyQVDVbrQ" name="A_ConfigurableUnitUsage_LinkHandle" memberEnd="_w5vqhJFcEeK-TsyQVDVbrQ _w5vqlJFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vqlJFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vqfZFcEeK-TsyQVDVbrQ" association="_w5vqk5FcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqlZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqlpFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vql5FcEeK-TsyQVDVbrQ" name="A_ConfigurableUnit_VSpecResolution" memberEnd="_w5udIJFcEeK-TsyQVDVbrQ _w5vqmJFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vqmJFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5udDZFcEeK-TsyQVDVbrQ" association="_w5vql5FcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqmZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqmpFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vqm5FcEeK-TsyQVDVbrQ" name="Constraint">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqnJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vqm5FcEeK-TsyQVDVbrQ">
          <body>&lt;p>A constraint specifies restrictions on permissible resolution models.&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vqnZFcEeK-TsyQVDVbrQ" general="_w5vDL5FcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vqnpFcEeK-TsyQVDVbrQ" name="context" visibility="private" type="_w5ucLpFcEeK-TsyQVDVbrQ" association="_w5vqopFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqn5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vqnpFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The context of the constraint.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqoJFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqoZFcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vqopFcEeK-TsyQVDVbrQ" name="A_Constraint_VSpec" memberEnd="_w5vqnpFcEeK-TsyQVDVbrQ _w5vqpJFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqo5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vqopFcEeK-TsyQVDVbrQ">
          <body>&lt;p>The context of the constraint.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vqpJFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vqm5FcEeK-TsyQVDVbrQ" association="_w5vqopFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqpZFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqppFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vqp5FcEeK-TsyQVDVbrQ" name="PrimitiveValueSpecification">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqqJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vqp5FcEeK-TsyQVDVbrQ">
          <body>&lt;p> A PrimitiveValueSpecification contains an expression in our Basic Constraint Language and is typed by a primitive type.&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vqqZFcEeK-TsyQVDVbrQ" general="_w5ucuJFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vqqpFcEeK-TsyQVDVbrQ" name="type" visibility="private" type="_w5ucwpFcEeK-TsyQVDVbrQ" isDerived="true" association="_w5vqspFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqq5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vqqpFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The PrimitiveType of this expression.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqrJFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqrZFcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vqrpFcEeK-TsyQVDVbrQ" name="expression" visibility="private" type="_w5vqHJFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vqtpFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqr5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vqrpFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Expression specifying the value.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqsJFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqsZFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vqspFcEeK-TsyQVDVbrQ" name="A_PrimitiveValueSpecification_PrimitiveType" memberEnd="_w5vqqpFcEeK-TsyQVDVbrQ _w5vqs5FcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vqs5FcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vqp5FcEeK-TsyQVDVbrQ" association="_w5vqspFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqtJFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqtZFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vqtpFcEeK-TsyQVDVbrQ" name="A_PrimitiveValueSpecification:_BCLExpression" memberEnd="_w5vqrpFcEeK-TsyQVDVbrQ _w5vqt5FcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vqt5FcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vqp5FcEeK-TsyQVDVbrQ" association="_w5vqtpFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vquJFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vquZFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vqupFcEeK-TsyQVDVbrQ" name="A_VSpecRef_VSpec" memberEnd="_w5vD_pFcEeK-TsyQVDVbrQ _w5vqu5FcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vqu5FcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vD-5FcEeK-TsyQVDVbrQ" association="_w5vqupFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqvJFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqvZFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vqvpFcEeK-TsyQVDVbrQ" name="BCLConstraint">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqv5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vqvpFcEeK-TsyQVDVbrQ">
          <body>&lt;p>Top class of a constraint. Contains basic constraint language expressions. A constraint can have local context, which is a VSpec (we refer to it as the context VSpec), or it can have a global context (i.e., the constraint is global within its enclosing package or configurable unit, and it has no context VSpec). The context determines the VSpec(s) for which the constraint must hold.&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vqwJFcEeK-TsyQVDVbrQ" general="_w5vqm5FcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vqwZFcEeK-TsyQVDVbrQ" name="expression" visibility="private" type="_w5vqHJFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vqxZFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqwpFcEeK-TsyQVDVbrQ" annotatedElement="_w5vqwZFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The constraining expression of this BCLConstraint.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqw5FcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqxJFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vqxZFcEeK-TsyQVDVbrQ" name="A_BCLConstraint_BCLExpression" memberEnd="_w5vqwZFcEeK-TsyQVDVbrQ _w5vqxpFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vqxpFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vqvpFcEeK-TsyQVDVbrQ" association="_w5vqxZFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqx5FcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqyJFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vqyZFcEeK-TsyQVDVbrQ" name="OperationCallExp">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqypFcEeK-TsyQVDVbrQ" annotatedElement="_w5vqyZFcEeK-TsyQVDVbrQ">
          <body>&lt;p>An expression that represents operations on given subexpressions (arguments). Operations include logical, arithmetic, relational operations, and two predicates.&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vqy5FcEeK-TsyQVDVbrQ" general="_w5vqHJFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vqzJFcEeK-TsyQVDVbrQ" name="argument" visibility="private" type="_w5vqHJFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vq8JFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vqzZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vqzJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Expressions for the arguments of the operation to be called.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vqzpFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vqz5FcEeK-TsyQVDVbrQ"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vq0JFcEeK-TsyQVDVbrQ" name="operation" visibility="private" type="_w5vq9JFcEeK-TsyQVDVbrQ" association="_w5vrHJFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vq0ZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vq0JFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Operation to be called.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vq0pFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vq05FcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vq1JFcEeK-TsyQVDVbrQ" name="BooleanLiteralExp">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vq1ZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vq1JFcEeK-TsyQVDVbrQ">
          <body>&lt;p>A literal expression that represents Boolean values ('true' or 'false').&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vq1pFcEeK-TsyQVDVbrQ" general="_w5vqHJFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vq15FcEeK-TsyQVDVbrQ" name="bool" visibility="private">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vq2JFcEeK-TsyQVDVbrQ" annotatedElement="_w5vq15FcEeK-TsyQVDVbrQ">
            <body>&lt;p>The boolean literal value of this expression.&lt;/p></body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://schema.omg.org/spec/UML/2.2/uml.xml#Boolean"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vq2ZFcEeK-TsyQVDVbrQ" name="StringLiteralExp">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vq2pFcEeK-TsyQVDVbrQ" annotatedElement="_w5vq2ZFcEeK-TsyQVDVbrQ">
          <body>&lt;p>A literal expression that represents strings.&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vq25FcEeK-TsyQVDVbrQ" general="_w5vqHJFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vq3JFcEeK-TsyQVDVbrQ" name="string" visibility="private">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vq3ZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vq3JFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The string value of this StringLiteralExpression.&lt;/p></body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://schema.omg.org/spec/UML/2.2/uml.xml#String"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vq3pFcEeK-TsyQVDVbrQ" name="NumericLiteralExp">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vq35FcEeK-TsyQVDVbrQ" annotatedElement="_w5vq3pFcEeK-TsyQVDVbrQ">
          <body>&lt;p class=&quot;MsoPlainText&quot;>A literal expression that represents real, unlimited natural, and integer constants.&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vq4JFcEeK-TsyQVDVbrQ" general="_w5vqHJFcEeK-TsyQVDVbrQ"/>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vq4ZFcEeK-TsyQVDVbrQ" name="IntegerLiteralExp">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vq4pFcEeK-TsyQVDVbrQ" annotatedElement="_w5vq4ZFcEeK-TsyQVDVbrQ">
          <body>&lt;p>A literal expression that represents integer numbers.&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vq45FcEeK-TsyQVDVbrQ" general="_w5vq3pFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vq5JFcEeK-TsyQVDVbrQ" name="integer" visibility="private">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vq5ZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vq5JFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The integer value of the IntegerLiteralExpression.&lt;/p></body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://schema.omg.org/spec/UML/2.2/uml.xml#Integer"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vq5pFcEeK-TsyQVDVbrQ" name="UnlimitedLiteralExp">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vq55FcEeK-TsyQVDVbrQ" annotatedElement="_w5vq5pFcEeK-TsyQVDVbrQ">
          <body>&lt;p>A literal expression that represents unlimited natural numbers.&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vq6JFcEeK-TsyQVDVbrQ" general="_w5vq3pFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vq6ZFcEeK-TsyQVDVbrQ" name="unlimited" visibility="private">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vq6pFcEeK-TsyQVDVbrQ" annotatedElement="_w5vq6ZFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Value of this UnlimitedLiteralExpression.&lt;/p></body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://schema.omg.org/spec/UML/2.2/uml.xml#UnlimitedNatural"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vq65FcEeK-TsyQVDVbrQ" name="RealLiteralExp">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vq7JFcEeK-TsyQVDVbrQ" annotatedElement="_w5vq65FcEeK-TsyQVDVbrQ">
          <body>&lt;p>A literal expression that represents floating-point numbers.&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vq7ZFcEeK-TsyQVDVbrQ" general="_w5vq3pFcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vq7pFcEeK-TsyQVDVbrQ" name="real" visibility="private">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vq75FcEeK-TsyQVDVbrQ" annotatedElement="_w5vq7pFcEeK-TsyQVDVbrQ">
            <body>&lt;p>The real value of this RealLiteralExpression.&lt;/p></body>
          </ownedComment>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vq8JFcEeK-TsyQVDVbrQ" name="A_OperationCallExp_BCLExpression" memberEnd="_w5vqzJFcEeK-TsyQVDVbrQ _w5vq8ZFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vq8ZFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vqyZFcEeK-TsyQVDVbrQ" association="_w5vq8JFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vq8pFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vq85FcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Enumeration" xmi:id="_w5vq9JFcEeK-TsyQVDVbrQ" name="Operation">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vq9ZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vq9JFcEeK-TsyQVDVbrQ">
          <body>&lt;p>Enumerates operations available in basic constraint language: logNot (logical negation), logAnd (logical conjunction), logOr (logical disjunction), logImplies (logical implication), logXor (logical exclusive-or), arithPlus (arithmetic addition), arithMinus (arithmetic subtraction), arithNeg (arithmetic negation), arithMult (arithmetic multiplication), arithDiv (arithmetic division), strConc (string concatenation), eq (equality), lte (less than or equal), gte (greater than or equal), lt (less than), gt (greater than), isDefined (checks if value is not bottom), isUndefined (checks if value is bottom)&lt;/p></body>
        </ownedComment>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_w5vq9pFcEeK-TsyQVDVbrQ" name="logNot" classifier="_w5vq9JFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vq95FcEeK-TsyQVDVbrQ" annotatedElement="_w5vq9pFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Logical not&lt;/p></body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_w5vq-JFcEeK-TsyQVDVbrQ" name="logAnd" classifier="_w5vq9JFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vq-ZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vq-JFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Logical and&lt;/p></body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_w5vq-pFcEeK-TsyQVDVbrQ" name="logOr" classifier="_w5vq9JFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vq-5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vq-pFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Logical or&lt;/p></body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_w5vq_JFcEeK-TsyQVDVbrQ" name="logImplies" classifier="_w5vq9JFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vq_ZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vq_JFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Logical implies&lt;/p></body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_w5vq_pFcEeK-TsyQVDVbrQ" name="logXor" classifier="_w5vq9JFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vq_5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vq_pFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Logical xor&lt;/p></body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_w5vrAJFcEeK-TsyQVDVbrQ" name="logIff" classifier="_w5vq9JFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vrAZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vrAJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Logical if and only if&lt;/p></body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_w5vrApFcEeK-TsyQVDVbrQ" name="arithPlus" classifier="_w5vq9JFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vrA5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vrApFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Arithmetic addition&lt;/p></body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_w5vrBJFcEeK-TsyQVDVbrQ" name="arithMinus" classifier="_w5vq9JFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vrBZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vrBJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Arithmetic subtraction&lt;/p></body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_w5vrBpFcEeK-TsyQVDVbrQ" name="arithNeg" classifier="_w5vq9JFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vrB5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vrBpFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Arithmetic negation&lt;/p></body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_w5vrCJFcEeK-TsyQVDVbrQ" name="arithMult" classifier="_w5vq9JFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vrCZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vrCJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Arithmetic multiplication&lt;/p></body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_w5vrCpFcEeK-TsyQVDVbrQ" name="arithDev" classifier="_w5vq9JFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vrC5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vrCpFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Arithmetic division&lt;/p></body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_w5vrDJFcEeK-TsyQVDVbrQ" name="strConc" classifier="_w5vq9JFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vrDZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vrDJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>String concatenation&lt;/p></body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_w5vrDpFcEeK-TsyQVDVbrQ" name="eq" classifier="_w5vq9JFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vrD5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vrDpFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Equal&lt;/p></body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_w5vrEJFcEeK-TsyQVDVbrQ" name="lte" classifier="_w5vq9JFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vrEZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vrEJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Logical less than or equal&lt;/p></body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_w5vrEpFcEeK-TsyQVDVbrQ" name="gte" classifier="_w5vq9JFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vrE5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vrEpFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Greater than or equal&lt;/p></body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_w5vrFJFcEeK-TsyQVDVbrQ" name="lt" classifier="_w5vq9JFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vrFZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vrFJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Logical less than&lt;/p></body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_w5vrFpFcEeK-TsyQVDVbrQ" name="gt" classifier="_w5vq9JFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vrF5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vrFpFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Greater than&lt;/p></body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_w5vrGJFcEeK-TsyQVDVbrQ" name="isDefined" classifier="_w5vq9JFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vrGZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vrGJFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Checks if the value is defined.&lt;/p></body>
          </ownedComment>
        </ownedLiteral>
        <ownedLiteral xmi:type="uml:EnumerationLiteral" xmi:id="_w5vrGpFcEeK-TsyQVDVbrQ" name="isUndefined" classifier="_w5vq9JFcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vrG5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vrGpFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Check if the value is undefined.&lt;/p></body>
          </ownedComment>
        </ownedLiteral>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vrHJFcEeK-TsyQVDVbrQ" name="A_OperationCallExp_Operation" memberEnd="_w5vq0JFcEeK-TsyQVDVbrQ _w5vrHZFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vrHZFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vqyZFcEeK-TsyQVDVbrQ" association="_w5vrHJFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vrHpFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vrH5FcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vrIJFcEeK-TsyQVDVbrQ" name="BaseModelHandle">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vrIZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vrIJFcEeK-TsyQVDVbrQ">
          <body>&lt;p>Represents the commonalities of ObjectHandle and LinkHandle as the means to relate to objects of the base model.&lt;/p></body>
        </ownedComment>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vrIpFcEeK-TsyQVDVbrQ" name="A_OpaqueVariationPoint_BaseModelHandle" memberEnd="_w5vC9JFcEeK-TsyQVDVbrQ _w5vrI5FcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vrI5FcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vC8JFcEeK-TsyQVDVbrQ" association="_w5vrIpFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vrJJFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vrJZFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vrJpFcEeK-TsyQVDVbrQ" name="A_OpaqueVariationPoint_ObjectHandle" memberEnd="_w5vC-JFcEeK-TsyQVDVbrQ _w5vrJ5FcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vrJ5FcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vC8JFcEeK-TsyQVDVbrQ" association="_w5vrJpFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vrKJFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vrKZFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vrKpFcEeK-TsyQVDVbrQ" name="OVPType">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vrK5FcEeK-TsyQVDVbrQ" annotatedElement="_w5vrKpFcEeK-TsyQVDVbrQ">
          <body>&lt;p>OVPType (Opaque Variation Point type) is a model transformation pattern which may be used to define an opaque variation point.&lt;/p></body>
        </ownedComment>
        <generalization xmi:type="uml:Generalization" xmi:id="_w5vrLJFcEeK-TsyQVDVbrQ" general="_w5vDL5FcEeK-TsyQVDVbrQ"/>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vrLZFcEeK-TsyQVDVbrQ" name="spec" visibility="private" type="_w5vrMZFcEeK-TsyQVDVbrQ" aggregation="composite" association="_w5vrN5FcEeK-TsyQVDVbrQ">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vrLpFcEeK-TsyQVDVbrQ" annotatedElement="_w5vrLZFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Reference to the specification.&lt;/p></body>
          </ownedComment>
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vrL5FcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vrMJFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vrMZFcEeK-TsyQVDVbrQ" name="OVPSemanticSpec">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vrMpFcEeK-TsyQVDVbrQ" annotatedElement="_w5vrMZFcEeK-TsyQVDVbrQ">
          <body>&lt;p>OVPSermanticSpec describes a transformation which will be performed by an OpaqueVariationPoint. The transformation is given as a string containing a textual definition of the transformation in the given transformation language. The transformation language is also given in the OVPSemanticSpec.&lt;/p></body>
        </ownedComment>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vrM5FcEeK-TsyQVDVbrQ" name="modelTransformation" visibility="private">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vrNJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vrM5FcEeK-TsyQVDVbrQ">
            <body>&lt;p>Model Transformation specification as String.&lt;/p></body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://schema.omg.org/spec/UML/2.2/uml.xml#String"/>
        </ownedAttribute>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vrNZFcEeK-TsyQVDVbrQ" name="transfromationLanguage" visibility="private">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vrNpFcEeK-TsyQVDVbrQ" annotatedElement="_w5vrNZFcEeK-TsyQVDVbrQ">
            <body>&lt;p>Language of the model transformation.&lt;/p></body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://schema.omg.org/spec/UML/2.2/uml.xml#String"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vrN5FcEeK-TsyQVDVbrQ" name="A_OVPType_OVPSemanticSpec" memberEnd="_w5vrLZFcEeK-TsyQVDVbrQ _w5vrOJFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vrOJFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vrKpFcEeK-TsyQVDVbrQ" association="_w5vrN5FcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vrOZFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vrOpFcEeK-TsyQVDVbrQ" value="1"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vrO5FcEeK-TsyQVDVbrQ" name="A_OpaqueVariationPoint_OVPType" memberEnd="_w5vC_JFcEeK-TsyQVDVbrQ _w5vrPJFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vrPJFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vC8JFcEeK-TsyQVDVbrQ" association="_w5vrO5FcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vrPZFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vrPpFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vrP5FcEeK-TsyQVDVbrQ" name="A_VSpec_VSpec" memberEnd="_w5ucPJFcEeK-TsyQVDVbrQ _w5vrQZFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vrQJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vrP5FcEeK-TsyQVDVbrQ">
          <body>&lt;p>The children of the VSpec.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vrQZFcEeK-TsyQVDVbrQ" name="parent" visibility="private" type="_w5ucLpFcEeK-TsyQVDVbrQ" association="_w5vrP5FcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vrQpFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vrQ5FcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vrRJFcEeK-TsyQVDVbrQ" name="A_ConfigurableUnit_VInterface" memberEnd="_w5udJJFcEeK-TsyQVDVbrQ _w5vrRpFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vrRZFcEeK-TsyQVDVbrQ" annotatedElement="_w5vrRJFcEeK-TsyQVDVbrQ">
          <body>&lt;p>&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vrRpFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5udDZFcEeK-TsyQVDVbrQ" association="_w5vrRJFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vrR5FcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vrSJFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vrSZFcEeK-TsyQVDVbrQ" name="A_ConfigurableUnitUsage_VInterface" memberEnd="_w5vqipFcEeK-TsyQVDVbrQ _w5vrSpFcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vrSpFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vqfZFcEeK-TsyQVDVbrQ" association="_w5vrSZFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5vrS5FcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5vrTJFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Class" xmi:id="_w5vrTZFcEeK-TsyQVDVbrQ" name="NamedElement" isAbstract="true">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vrTpFcEeK-TsyQVDVbrQ" annotatedElement="_w5vrTZFcEeK-TsyQVDVbrQ">
          <body>&lt;p>An named element is an element identifiable by name. Names are composed of letters, numbers, the underscore sign &quot;_&quot; and the dollar sign &quot;$&quot;. The first character of a name must be a letter, an underscore or a dollar sign. Reserved keywords of the constraint language cannot be used as identifiers.&lt;/p></body>
        </ownedComment>
        <ownedAttribute xmi:type="uml:Property" xmi:id="_w5vrT5FcEeK-TsyQVDVbrQ" name="name" visibility="private">
          <ownedComment xmi:type="uml:Comment" xmi:id="_w5vrUJFcEeK-TsyQVDVbrQ" annotatedElement="_w5vrT5FcEeK-TsyQVDVbrQ">
            <body>&lt;p>The name of the element. Names are composed of letters, numbers, the underscore sign &quot;_&quot;  and the dollar sign &quot;$&quot;. The first character of a name must be a letter, an underscore or a dollar sign.  Reserved keywords of the constraint language cannot be used as identifiers.&lt;/p></body>
          </ownedComment>
          <type xmi:type="uml:PrimitiveType" href="http://schema.omg.org/spec/UML/2.2/uml.xml#String"/>
        </ownedAttribute>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5vrUZFcEeK-TsyQVDVbrQ" name="A_CVSpecDerivation_CVSpec_deriving" memberEnd="_w5vqW5FcEeK-TsyQVDVbrQ _w5vrU5FcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5vrUpFcEeK-TsyQVDVbrQ" annotatedElement="_w5vrUZFcEeK-TsyQVDVbrQ">
          <body>&lt;p>The CVSpec from which the resolution for the derived CVSpec is derived in this derivation.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5vrU5FcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vqVJFcEeK-TsyQVDVbrQ" association="_w5vrUZFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5wQ4JFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5wQ4ZFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5wQ4pFcEeK-TsyQVDVbrQ" name="A_ConfigurabelUnit_VSpecDerivation" memberEnd="_w5vCwZFcEeK-TsyQVDVbrQ _w5wQ45FcEeK-TsyQVDVbrQ">
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5wQ45FcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5udDZFcEeK-TsyQVDVbrQ" association="_w5wQ4pFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5wQ5JFcEeK-TsyQVDVbrQ" value="1"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5wQ5ZFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5wQ5pFcEeK-TsyQVDVbrQ" name="A_CVSpecDerivation_CVSpec_derived" memberEnd="_w5vqX5FcEeK-TsyQVDVbrQ _w5wQ6JFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5wQ55FcEeK-TsyQVDVbrQ" annotatedElement="_w5wQ5pFcEeK-TsyQVDVbrQ">
          <body>&lt;p>The CVSpec whose resolution is derived by this VSpec derivation.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5wQ6JFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vqVJFcEeK-TsyQVDVbrQ" association="_w5wQ5pFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5wQ6ZFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5wQ6pFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5wQ65FcEeK-TsyQVDVbrQ" name="A_VariableDerivation_Variable" memberEnd="_w5vqUJFcEeK-TsyQVDVbrQ _w5wQ7ZFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5wQ7JFcEeK-TsyQVDVbrQ" annotatedElement="_w5wQ65FcEeK-TsyQVDVbrQ">
          <body>&lt;p>The variable whose resolution is derived by this VSpec derivation.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5wQ7ZFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vqSZFcEeK-TsyQVDVbrQ" association="_w5wQ65FcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5wQ7pFcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5wQ75FcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
      <packagedElement xmi:type="uml:Association" xmi:id="_w5wQ8JFcEeK-TsyQVDVbrQ" name="A_ChoiceDerivation_Choice" memberEnd="_w5vqRZFcEeK-TsyQVDVbrQ _w5wQ8pFcEeK-TsyQVDVbrQ">
        <ownedComment xmi:type="uml:Comment" xmi:id="_w5wQ8ZFcEeK-TsyQVDVbrQ" annotatedElement="_w5wQ8JFcEeK-TsyQVDVbrQ">
          <body>&lt;p>The choice whose resolution is derived by this VSpec derivation.&lt;/p></body>
        </ownedComment>
        <ownedEnd xmi:type="uml:Property" xmi:id="_w5wQ8pFcEeK-TsyQVDVbrQ" name="" visibility="private" type="_w5vqPpFcEeK-TsyQVDVbrQ" association="_w5wQ8JFcEeK-TsyQVDVbrQ">
          <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_w5wQ85FcEeK-TsyQVDVbrQ" value="*"/>
          <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_w5wQ9JFcEeK-TsyQVDVbrQ"/>
        </ownedEnd>
      </packagedElement>
    </packagedElement>
  </uml:Package>
  <mofext:Tag xmi:type="mofext:Tag" xmi:id="_100" name="org.omg.xmi.nsPrefix" element="_fXOBjkSPEeKq37LhoJhhUw" value="cvl"/>
</xmi:XMI>