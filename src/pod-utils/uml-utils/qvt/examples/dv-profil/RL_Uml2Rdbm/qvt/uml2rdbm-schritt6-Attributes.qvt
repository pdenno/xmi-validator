/* */
transformation uml2rdbm ( uml : MyUML, rdbm : MyRDBM ) 
{
   /* */
   top relation PackageToSchema 
   {
      packageName : String;
      checkonly domain uml  pck : Package { name = packageName };
      enforce   domain rdbm sma : Schema  { name = packageName };
   }

   /* */
   top relation ClassToTable 
   {
	  className : String;
	  
	  checkonly domain uml cls : Class 
	  {
	    namespace = pck : Package { },
	    kind      = 'persistent',
	    name      = className
	  };
	  
      enforce   domain rdbm tbl : Table
      {
	    schema   = sma : Schema {},
	    name     = className,

	    column   = col : Column 
	    {
	      name   = className + '_ID',
	      type   = 'Integer'
	    },
	    
	    primaryKey      = pKey : PrimaryKey 
	    {
    	  name   = className + '_PK', 
	      column = col : Column {}
	    }
      };

 	  when 	{ PackageToSchema   ( pck, sma); }
 	  where { AttributeToColumn ( cls, tbl); }
   }

   /* */
   relation AttributeToColumn 
   {
	  checkonly domain uml  cls : Class { };
	  enforce   domain rdbm tbl : Table { };
	  
	  where 
	  {
	    PrimitiveAttributeToColumn ( cls, tbl );
	    ComplexAttributeToColumn   ( cls, tbl );
	    SuperAttributeToColumn     ( cls, tbl );
	  }
   }

   /* */
   relation PrimitiveAttributeToColumn 
   {
	  attributeName    : String;
	  primDataTypeName : String;
	  sqlType          : String;
	  
	  checkonly domain uml c : Class 
	  {
	    attribute = a : Attribute 
	    {
	      name = attributeName,
	      type = pdt : PrimitiveDataType { name = primDataTypeName }
	    }
	  };
	  
	  enforce domain rdbm t : Table 
	  {
	    column = cl : Column 
	    {
	      name = attributeName,
	      type = sqlType
	    }
	  };
	  
	  where 
	  {
	    sqlType   = if primDataTypeName = 'INTEGER' 
	                then 'Integer'
	                else if primDataTypeName = 'BOOLEAN' 
	                     then 'Boolean'
	                     else 'Varchar'
	                     endif
	                endif;
	  }
   }

   /* */
   relation ComplexAttributeToColumn 
   {
      attributeName    : String;
	  
	  checkonly domain uml cls : Class 
	  {
	    -- hier handelt es sich um ein Attribut mit einer Klasse als Datentyp
	    attribute = attr : Attribute 
	    {
	      name = attributeName,
	      type = attrType : Class {}
	    }
	  };
	  
	  enforce domain rdbm tbl : Table {};
	  
	  where 
	  {
         -- Mit der Klasse als Datentyp des Attributes wird hier rekursiv
         -- abgestiegen; die Tabelle tbl bleibt die, die sie ist. 
	     AttributeToColumn ( attrType, tbl );
	  }
	}

   /* */
   relation SuperAttributeToColumn 
   {
	  
	  checkonly domain uml cls : Class 
	  {
	    general = supCls : Class {}
	  };
	  
	  enforce domain rdbm tbl : Table {};
	  
	  where 
	  {
	    AttributeToColumn ( supCls, tbl );
	  }
   }
}
