/* */
transformation uml2rdbm ( uml : MyUML, rdbm : MyRDBM ) 
{
   /* */
   top relation PackageToSchema 
   {
      packageName : String;
      checkonly domain uml  pck : Package { name = packageName };
      enforce   domain rdbm sma : Schema  { name = packageName };
   }

   /* */
   top relation ClassToTable 
   {
	  className : String;
	  prefix    : String;
	  
	  checkonly domain uml cls : Class 
	  {
	    namespace = pck : Package { },
	    kind      = 'persistent',
	    name      = className
	  };
	  
      enforce   domain rdbm tbl : Table
      {
	    schema   = sma : Schema {},
	    name     = className
      };

 	  when 	{ PackageToSchema   ( pck, sma); }

 	  where 
 	  { 
	    prefix = className; -- prefix takes the value of className

        -- AttributeToColumn contains 3 domains, so it expects 3 arguments
        AttributeToColumn ( cls, tbl, prefix );
      }
   }

   /* */
   relation AttributeToColumn 
   {
	  checkonly domain uml  cls : Class {};
	  enforce   domain rdbm tbl : Table {};
	  primitive domain prefix   : String;
	  
	  where 
	  {
        -- the arguments of AttributeToColumn are passed to  
        -- to the concrete relations 
	    PrimitiveAttributeToColumn ( cls, tbl, prefix );
	    ComplexAttributeToColumn   ( cls, tbl, prefix );
	    SuperAttributeToColumn     ( cls, tbl, prefix );
	  }
   }

   /* */
   relation PrimitiveAttributeToColumn 
   {
	  columnName       : String;
	  attributeName    : String;
	  primDataTypeName : String;
	  sqlType          : String;
	  
	  checkonly domain uml c : Class 
	  {
	    attribute = a : Attribute 
	    {
	      name = attributeName,
	      type = pdt : PrimitiveDataType { name = primDataTypeName }
	    }
	  };
	  
	  enforce domain rdbm t : Table 
	  {
	    column = cl : Column 
	    {
	      name = columnName,
	      type = sqlType
	    }
	  };
	  
	  primitive domain prefix   : String;

	  where 
	  {
	     -- set columnName based on prefix 
	     columnName = if   prefix = ''        
                      then attributeName
                      else prefix + '_' + attributeName  
                      endif;
	  
	     sqlType    = if primDataTypeName = 'INTEGER' 
	                  then 'Integer'
	                  else if primDataTypeName = 'BOOLEAN' 
	                       then 'Boolean'
	                       else 'Varchar'
	                       endif
	                  endif;
	  }
   }

   /* */
   relation ComplexAttributeToColumn 
   {
      attributeName    : String;
	  
	  checkonly domain uml cls : Class 
	  {
	    attribute = attr : Attribute 
	    {
	      name = attributeName,
	      type = attrType : Class {}
	    }
	  };
	  
	  enforce   domain rdbm tbl : Table {};
	  
	  -- this domain is for simply passing the prefix 
	  primitive domain prefix   : String;

	  where 
	  {
	     AttributeToColumn ( attrType, tbl, prefix );
	  }
	}

   /* */
   relation SuperAttributeToColumn 
   {
	  checkonly domain uml cls : Class 
	  {
	    general = supCls : Class {}
	  };
	  
	  enforce   domain rdbm tbl : Table {};

	  -- this domain is for simply passing the prefix 
	  primitive domain prefix   : String;

	  where 
	  {
	    AttributeToColumn ( supCls, tbl, prefix );
	  }
   }
}
